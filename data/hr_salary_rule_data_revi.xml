<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">

        <!-- ============================================= -->
        <!-- REGLA: SALARIO BÁSICO (SALARIO) - CORREGIDA -->
        <!-- ============================================= -->
        <record id="hr_rule_salario_basico" model="hr.salary.rule">
            <field name="name">Salario Básico</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">10</field> <!-- Secuencia ajustada a 10 (recomendado para reglas base) -->
            <field name="code">SALARIO</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <!-- Condición: Aplicar si es empleado REGULAR (No Aprendiz, No Integral) y salario > 0 -->
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# Define variables and fetch common data safely for THIS RULE'S SCRIPT
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# env: Odoo environment object (use payslip.env for safer access in sandbox)


# --- Employee Type Determination ---
# Define flags to easily identify the employee type
is_regular = False # Default: Not Integral, Not Apprentice
is_integral = False # Default: Salario Integral
is_apprentice_lectiva = False # Default: Aprendiz SENA Etapa Lectiva (code '4')
is_apprentice_productiva = False # Default: Aprendiz SENA Etapa Productiva / Prácticas (code '5')
is_any_apprentice = False # Convenience flag for any apprentice

if contract: # Ensure contract exists before accessing its fields
    # Check for Integral first (higher priority)
    # Use hasattr for safe check if 'integral_salary' field exists on hr.contract
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    # Then check for Apprentice types if not Integral
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Check against DIAN Code '4'
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5': # Check against DIAN Code '5'
            is_apprentice_productiva = True
            is_any_apprentice = True

    # If not Integral and not any Apprentice type, it's a Regular employee
    if not is_integral and not is_any_apprentice:
        is_regular = True


# --- Fetching key values from categories (Results of rules with lower sequence) ---
# Access calculated values from previous rules using categories.get(CODE, default_value)
# Ensure that the rules you get values from have a lower 'sequence' number
# than the current rule, otherwise their value will be 0.0 here.
# Note: For SALARIO (seq 10), most other base rules (IBC, etc.) have higher sequence, so they won't be available.
# We only rely on contract data and worked_days here.
# ibc = categories.get('IBC', 0.0) # Not available yet


# --- Company specific values ---
# Define and fetch common company-related values safely
smmlv = 0.0 # Default Salario Mínimo Mensual Legal Vigente
uvt_value = 0.0 # Default Valor Unidad de Valor Tributario
is_exonerated_company = False # Default for company exoneration (Ley 1607 - Art. 114-1 E.T.)

company_obj = contract.company_id if contract else None # Get company record safely

if company_obj: # Ensure company record exists
    # Access SMMLV safely
    if hasattr(company_obj, 'smmlv_value'): # Use hasattr as smmlv_value might be from a custom module/field
        # Check if the value is numeric and positive
        if isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
            smmlv = company_obj.smmlv_value

    # Access UVT safely
    if hasattr(company_obj, 'uvt_value'): # Use hasattr for safe check
         # Check if the value is numeric and positive
        if isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
             uvt_value = company_obj.uvt_value

    # Access Ley 1607 exoneration flag safely
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        # Get the boolean value
        is_exonerated_company = bool(company_obj.ley_1607)


# --- Common helper variables ---
# Access currency rounding and decimal places safely
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01 # Default rounding
currency_digits = payslip.currency_id.decimal_places if payslip and payslip.currency_id else 2 # Default decimal places
precision_rounding = currency_rounding # Use standard term


# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALARIO condition ---
# Condición: Aplica si hay contrato, salario > 0, Y es empleado REGULAR (No Aprendiz, No Salario Integral).
result = False
if is_regular and contract and hasattr(contract, 'wage'): # is_regular from preamble, check wage existence
    # Check if wage is a valid positive number
    if isinstance(contract.wage, (int, float)) and contract.wage > 0:
        result = True

                ]]>
            </field>
            <field name="amount_select">code</field>
            <!-- El cálculo no necesita cambiar, solo aplica si la condición es True -->
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# Define variables and fetch common data safely for THIS RULE'S SCRIPT
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# env: Odoo environment object (use payslip.env for safer access in sandbox)


# --- Employee Type Determination ---
# Define flags to easily identify the employee type
is_regular = False # Default: Not Integral, Not Apprentice
is_integral = False # Default: Salario Integral
is_apprentice_lectiva = False # Default: Aprendiz SENA Etapa Lectiva (code '4')
is_apprentice_productiva = False # Default: Aprendiz SENA Etapa Productiva / Prácticas (code '5')
is_any_apprentice = False # Convenience flag for any apprentice

if contract: # Ensure contract exists before accessing its fields
    # Check for Integral first (higher priority)
    # Use hasattr for safe check if 'integral_salary' field exists on hr.contract
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    # Then check for Apprentice types if not Integral
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Check against DIAN Code '4'
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5': # Check against DIAN Code '5'
            is_apprentice_productiva = True
            is_any_apprentice = True

    # If not Integral and not any Apprentice type, it's a Regular employee
    if not is_integral and not is_any_apprentice:
        is_regular = True


# --- Fetching key values from categories (Results of rules with lower sequence) ---
# Access calculated values from previous rules using categories.get(CODE, default_value)
# Ensure that the rules you get values from have a lower 'sequence' number
# than the current rule, otherwise their value will be 0.0 here.
# Note: For SALARIO (seq 10), most other base rules (IBC, etc.) have higher sequence, so they won't be available.
# We only rely on contract data and worked_days here.
# ibc = categories.get('IBC', 0.0) # Not available yet


# --- Company specific values ---
# Define and fetch common company-related values safely
smmlv = 0.0 # Default Salario Mínimo Mensual Legal Vigente
uvt_value = 0.0 # Default Valor Unidad de Valor Tributario
is_exonerated_company = False # Default for company exoneration (Ley 1607 - Art. 114-1 E.T.)

company_obj = contract.company_id if contract else None # Get company record safely

if company_obj: # Ensure company record exists
    # Access SMMLV safely
    if hasattr(company_obj, 'smmlv_value'): # Use hasattr as smmlv_value might be from a custom module/field
        # Check if the value is numeric and positive
        if isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
            smmlv = company_obj.smmlv_value

    # Access UVT safely
    if hasattr(company_obj, 'uvt_value'): # Use hasattr for safe check
         # Check if the value is numeric and positive
        if isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
             uvt_value = company_obj.uvt_value

    # Access Ley 1607 exoneration flag safely
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        # Get the boolean value
        is_exonerated_company = bool(company_obj.ley_1607)


# --- Common helper variables ---
# Access currency rounding and decimal places safely
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01 # Default rounding
currency_digits = payslip.currency_id.decimal_places if payslip and payslip.currency_id else 2 # Default decimal places
precision_rounding = currency_rounding # Use standard term


# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALARIO amount ---
result = 0.0
# Esta regla solo se ejecuta si la condición es True,
# lo que significa que es un empleado REGULAR con contract.wage > 0.

# --- CALCULAR DÍAS A LIQUIDAR (Base 30 - Ausencias No Rem.) ---
# Usamos worked_days del preámbulo
days_to_liquidate = 30.0 # Base mensual teórica
worked_days_dict = {wd.code: wd for wd in worked_days.values()} # Use worked_days dictionary from preamble
# ¡¡AJUSTA ESTA LISTA CON TUS CÓDIGOS EXACTOS DE worked_days_line_ids PARA AUSENCIAS NO REMUNERADAS!!
unpaid_leave_codes = ['LNR', 'SUS'] # Ejemplo. Ajusta si es necesario.
unpaid_leave_days = 0.0
for code in unpaid_leave_codes:
    wd_line = worked_days_dict.get(code)
    if wd_line:
        # Use try-except for robust access to number_of_days
        try: unpaid_leave_days += float(wd_line.number_of_days or 0.0)
        except (ValueError, TypeError): pass # Ignore if not numeric
# Calcular días a liquidar efectivos (máximo 30, mínimo 0)
days_to_liquidate = min(30.0, max(0.0, 30.0 - unpaid_leave_days))
# --- FIN CALCULAR DÍAS A LIQUIDAR ---

# Calcular salario prorrateado
# contract and contract.wage > 0 are guaranteed by the condition
contract_wage = contract.wage # Already know it's valid by condition

if days_to_liquidate > 0:
    daily_rate = contract_wage / 30.0 # Tarifa diaria siempre sobre 30
    result = daily_rate * days_to_liquidate
# If days_to_liquidate is 0, result remains 0.0, which is correct.

# Redondeo estándar de moneda
if not float_is_zero(result, precision_rounding=precision_rounding): # Use precision_rounding from preamble
     # Use payslip.currency_id for rounding
     if payslip and payslip.currency_id:
         result = payslip.currency_id.round(result)
     else:
         # Fallback rounding if currency not available
         result = round(result, 2)
else:
     result = 0.0 # Ensure it's exactly 0 if very small after calculation/rounding

                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">basic</field> <!-- Verificar código DIAN -->
            <field name="edi_is_detailed" eval="True"/> <!-- Detallar en XML EDI -->
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">ATT</field> <!-- Verifica código Worked Entry Type para Asistencia -->
            <field name="edi_percent_select">default</field> <!-- No aplica porcentaje fijo de recargo -->
            <field name="co_partner_select">default</field> <!-- Payment is to the employee -->
        </record>

        <!-- ============================================= -->
        <!--     REGLA: AUXILIO DE TRANSPORTE (AUXTRANS) - CORREGIDA   -->
        <!-- ============================================= -->
        <record id="hr_rule_auxilio_transporte" model="hr.salary.rule">
            <field name="name">Auxilio de Transporte</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">20</field> <!-- Secuencia ajustada a 20 -->
            <field name="code">AUXTRANS</field>
            <field name="category_id" ref="hr_payroll.ALW"/> <!-- Categoría ALW (Allowance) -->
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# Define variables and fetch common data safely for THIS RULE'S SCRIPT
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# env: Odoo environment object (use payslip.env for safer access in sandbox)


# --- Employee Type Determination ---
# Define flags to easily identify the employee type
is_regular = False # Default: Not Integral, Not Apprentice
is_integral = False # Default: Salario Integral
is_apprentice_lectiva = False # Default: Aprendiz SENA Etapa Lectiva (code '4')
is_apprentice_productiva = False # Default: Aprendiz SENA Etapa Productiva / Prácticas (code '5')
is_any_apprentice = False # Convenience flag for any apprentice

if contract: # Ensure contract exists before accessing its fields
    # Check for Integral first (higher priority)
    # Use hasattr for safe check if 'integral_salary' field exists on hr.contract
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    # Then check for Apprentice types if not Integral
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Check against DIAN Code '4'
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5': # Check against DIAN Code '5'
            is_apprentice_productiva = True
            is_any_apprentice = True

    # If not Integral and not any Apprentice type, it's a Regular employee
    if not is_integral and not is_any_apprentice:
        is_regular = True


# --- Fetching key values from categories (Results of rules with lower sequence) ---
# Access calculated values from previous rules using categories.get(CODE, default_value)
# Ensure that the rules you get values from have a lower 'sequence' number
# than the current rule, otherwise their value will be 0.0 here.
# Note: For SALARIO (seq 10), most other base rules (IBC, etc.) have higher sequence, so they won't be available.
# We only rely on contract data and worked_days here.
# ibc = categories.get('IBC', 0.0) # Not available yet


# --- Company specific values ---
# Define and fetch common company-related values safely
smmlv = 0.0 # Default Salario Mínimo Mensual Legal Vigente
uvt_value = 0.0 # Default Valor Unidad de Valor Tributario
is_exonerated_company = False # Default for company exoneration (Ley 1607 - Art. 114-1 E.T.)

company_obj = contract.company_id if contract else None # Get company record safely

if company_obj: # Ensure company record exists
    # Access SMMLV safely
    if hasattr(company_obj, 'smmlv_value'): # Use hasattr as smmlv_value might be from a custom module/field
        # Check if the value is numeric and positive
        if isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
            smmlv = company_obj.smmlv_value

    # Access UVT safely
    if hasattr(company_obj, 'uvt_value'): # Use hasattr for safe check
         # Check if the value is numeric and positive
        if isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
             uvt_value = company_obj.uvt_value

    # Access Ley 1607 exoneration flag safely
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        # Get the boolean value
        is_exonerated_company = bool(company_obj.ley_1607)


# --- Common helper variables ---
# Access currency rounding and decimal places safely
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01 # Default rounding
currency_digits = payslip.currency_id.decimal_places if payslip and payslip.currency_id else 2 # Default decimal places
precision_rounding = currency_rounding # Use standard term


# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for AUXTRANS condition ---
result = False
# Aplica si es empleado REGULAR (No Aprendiz, No Integral)
# Y gana menos de 2 SMMLV (verificando valores válidos)
# Usamos variables del preámbulo: is_regular, smmlv, contract.wage

if is_regular and contract and hasattr(contract, 'wage') and contract.company_id: # is_regular from preamble, check wage/company existence
    contract_wage = contract.wage # Already checked existence, check value/type
    if isinstance(contract_wage, (int, float)) and contract_wage > 0 and smmlv > 0: # Check valid wage and smmlv from preamble
         if contract_wage < (2 * smmlv): # Condition: wage < 2*SMMLV
             result = True

                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# Define variables and fetch common data safely for THIS RULE'S SCRIPT
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# env: Odoo environment object (use payslip.env for safer access in sandbox)


# --- Employee Type Determination ---
# Define flags to easily identify the employee type
is_regular = False # Default: Not Integral, Not Apprentice
is_integral = False # Default: Salario Integral
is_apprentice_lectiva = False # Default: Aprendiz SENA Etapa Lectiva (code '4')
is_apprentice_productiva = False # Default: Aprendiz SENA Etapa Productiva / Prácticas (code '5')
is_any_apprentice = False # Convenience flag for any apprentice

if contract: # Ensure contract exists before accessing its fields
    # Check for Integral first (higher priority)
    # Use hasattr for safe check if 'integral_salary' field exists on hr.contract
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    # Then check for Apprentice types if not Integral
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Check against DIAN Code '4'
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5': # Check against DIAN Code '5'
            is_apprentice_productiva = True
            is_any_apprentice = True

    # If not Integral and not any Apprentice type, it's a Regular employee
    if not is_integral and not is_any_apprentice:
        is_regular = True


# --- Fetching key values from categories (Results of rules with lower sequence) ---
# Access calculated values from previous rules using categories.get(CODE, default_value)
# Ensure that the rules you get values from have a lower 'sequence' number
# than the current rule, otherwise their value will be 0.0 here.
# Note: For SALARIO (seq 10), most other base rules (IBC, etc.) have higher sequence, so they won't be available.
# We only rely on contract data and worked_days here.
# ibc = categories.get('IBC', 0.0) # Not available yet


# --- Company specific values ---
# Define and fetch common company-related values safely
smmlv = 0.0 # Default Salario Mínimo Mensual Legal Vigente
uvt_value = 0.0 # Default Valor Unidad de Valor Tributario
is_exonerated_company = False # Default for company exoneration (Ley 1607 - Art. 114-1 E.T.)

company_obj = contract.company_id if contract else None # Get company record safely

if company_obj: # Ensure company record exists
    # Access SMMLV safely
    if hasattr(company_obj, 'smmlv_value'): # Use hasattr as smmlv_value might be from a custom module/field
        # Check if the value is numeric and positive
        if isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
            smmlv = company_obj.smmlv_value

    # Access UVT safely
    if hasattr(company_obj, 'uvt_value'): # Use hasattr for safe check
         # Check if the value is numeric and positive
        if isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
             uvt_value = company_obj.uvt_value

    # Access Ley 1607 exoneration flag safely
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        # Get the boolean value
        is_exonerated_company = bool(company_obj.ley_1607)


# --- Common helper variables ---
# Access currency rounding and decimal places safely
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01 # Default rounding
currency_digits = payslip.currency_id.decimal_places if payslip and payslip.currency_id else 2 # Default decimal places
precision_rounding = currency_rounding # Use standard term


# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for AUXTRANS amount ---
result = 0.0
company = contract.company_id if contract else None

# Asegúrate de que el campo para el valor del Auxilio de Transporte en res.company se llama 'stm_value'
# Acceso seguro a stm_value
monthly_transport_subsidy = company.stm_value if company and hasattr(company, 'stm_value') and isinstance(company.stm_value, (int, float)) else 0.0

# Usamos worked_days del preámbulo
worked_days_dict = {wd.code: wd for wd in worked_days.values()} # Use worked_days dictionary from preamble
# ¡¡AJUSTA ESTA LISTA CON TUS CÓDIGOS EXACTOS DE worked_days_line_ids PARA AUSENCIAS NO REMUNERADAS!!
unpaid_leave_codes = ['LNR', 'SUS'] # Ejemplo. Ajusta si es necesario.

if monthly_transport_subsidy > 0:
    # --- Calcular Días Base para Salario (DBS) ---
    # Días teóricos a liquidar (30 - ausencias no pagas)
    days_base_salary = 30.0 # Base mensual teórica
    unpaid_leave_days = 0.0
    for code in unpaid_leave_codes:
        wd_line = worked_days_dict.get(code)
        if wd_line:
            try: unpaid_leave_days += float(wd_line.number_of_days or 0.0)
            except (ValueError, TypeError): pass # Ignorar
    days_base_salary = min(30.0, max(0.0, 30.0 - unpaid_leave_days))

    # --- Calcular Días Base para Auxilio de Transporte (DBAT = DBS - Vacaciones Disfrutadas) ---
    vacation_days = 0.0
    # ¡¡USA TU CÓDIGO REAL DE worked_days_line_ids PARA VACACIONES DISFRUTADAS!! (debe coincidir con el de hr_work_entry_type)
    vacation_work_entry_code = 'VACDISF' # Ejemplo. Ajusta si es necesario.
    vacation_line = worked_days_dict.get(vacation_work_entry_code)
    if vacation_line:
         try: vacation_days += float(vacation_line.number_of_days or 0.0) # Sumar si existe, usar +=
         except (ValueError, TypeError): pass # Ignorar

    # El auxilio de transporte no se paga por los días de vacaciones disfrutadas
    days_for_transport_allowance = max(0.0, days_base_salary - vacation_days)

    # Calcular valor prorrateado usando DBAT
    if days_for_transport_allowance > 0:
        daily_rate = monthly_transport_subsidy / 30.0 # Tarifa diaria siempre sobre 30
        result = daily_rate * days_for_transport_allowance

# Redondeo estándar de moneda
if not float_is_zero(result, precision_rounding=precision_rounding): # Use precision_rounding from preamble
    # Use payslip.currency_id for rounding
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        # Fallback rounding if currency not available
        result = round(result, 2)
else:
     result = 0.0 # Ensure it's exactly 0 if very small after calculation/rounding

                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">transports_assistance</field> # Verificar código DIAN
            <field name="edi_is_detailed" eval="True"/> # Detallar en XML EDI
            <field name="edi_quantity_select">code</field> # Seleccionar 'code' para reportar cantidad calculada (días)
            # Si calculas 'days_for_transport_allowance' y quieres reportarlo, necesitas asignarlo a una variable 'result_qty'
            # en amount_python_compute y usar edi_quantity_select="code" + edi_quantity_python_compute.
            # Por simplicidad, si solo quieres reportar 1, deja default. Si quieres los días prorrateados, necesitas más código.
            # Por ahora, dejamos 'code' pero la cantidad real reportada dependerá de edi_quantity_python_compute
            # o de la lógica de tu módulo para llenar la cantidad EDI.
            <field name="edi_percent_select">default</field> # No aplica porcentaje fijo de recargo
            <field name="co_partner_select">default</field> # Payment is to the employee
        </record>

        <!-- ============================================= -->
        <!--      REGLA: HORA EXTRA DIURNA (HED) - ROBUSTECIDA -->
        <!-- ============================================= -->
        <record id="hr_rule_hora_extra_diurna" model="hr.salary.rule">
            <field name="name">Hora Extra Diurna</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">30</field> <!-- Ajustada secuencia -->
            <field name="code">HED</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Not needed for HED calculation directly
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Not needed

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for HED condition ---
result = False
hed_input_amount = 0.0

# Safely get HED hours from inputs
hed_input_line = inputs.get('HED') # inputs is a dict of hr.payslip.input objects
if hed_input_line and hasattr(hed_input_line, 'amount') and isinstance(hed_input_line.amount, (int, float)):
    hed_input_amount = hed_input_line.amount

# Apply if regular employee and HED hours are positive
if is_regular and hed_input_amount > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Not needed
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Not needed

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for HED amount ---
result = 0.0
hed_hours = 0.0

# Safely get HED hours from inputs (already validated in condition, but good practice to re-fetch)
hed_input_line = inputs.get('HED')
if hed_input_line and hasattr(hed_input_line, 'amount') and isinstance(hed_input_line.amount, (int, float)):
    hed_hours = hed_input_line.amount

# Proceed only if regular employee, contract, wage, and HED hours are valid
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and hed_hours > 0:
    contract_wage = contract.wage
    
    # Calculate ordinary hourly rate (assuming 240 hours per month)
    # TODO: Consider making 240.0 a configurable parameter or deriving from work schedule
    hourly_rate_divisor = 240.0
    if hourly_rate_divisor > 0:
        hourly_rate = contract_wage / hourly_rate_divisor
    else:
        hourly_rate = 0.0 # Avoid division by zero

    if hourly_rate > 0:
        # Get overtime percentage from company settings
        # Assumes 'daily_overtime' field exists in res.company and stores the percentage (e.g., 25 for 25%)
        default_overtime_percentage = 25.0 # Default if not set or company not found
        overtime_percentage = default_overtime_percentage

        if company_obj and hasattr(company_obj, 'daily_overtime'):
            company_percentage = company_obj.daily_overtime
            if isinstance(company_percentage, (int, float)) and company_percentage >= 0: # Percentage can be 0
                overtime_percentage = company_percentage
            # else: _logger.warning("HED: company.daily_overtime is not a valid number.")
        # else: _logger.warning("HED: company_obj or company.daily_overtime not found, using default.")

        # Calculate total HED value (base hour + surcharge)
        # Formula: hours * hourly_rate * (1 + percentage/100)
        calculated_amount = hed_hours * hourly_rate * (1 + (overtime_percentage / 100.0))
        
        # Standard currency rounding
        if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(calculated_amount)
            elif precision_rounding: # Fallback only if precision is meaningful
                result = round(calculated_amount, 2) # Fallback rounding
        else:
            result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">daily_overtime</field> <!-- Categoría correcta para HED -->
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">input</field>
            <field name="edi_quantity_input_code">HED</field>
            <field name="edi_percent_select">default</field>
            <field name="edi_percent_company_field">daily_overtime</field> <!-- Campo correcto en res.company -->
            <field name="co_partner_select">default</field>
        </record>
                              
        <!-- ================================================= -->
        <!--      REGLA: HORA EXTRA NOCTURNA (HEN) - ROBUSTECIDA -->
        <!-- ================================================= -->
        <record id="hr_rule_hora_extra_nocturna" model="hr.salary.rule">
            <field name="name">Hora Extra Nocturna</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">35</field> <!-- Secuencia original, ajustar si es necesario -->
            <field name="code">HEN</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Corregido: Se repitió la línea anterior y faltaba el cierre del bloque condicional
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for HEN condition ---
result = False
hen_input_amount = 0.0

# Safely get HEN hours from inputs
hen_input_line = inputs.get('HEN') # inputs is a dict of hr.payslip.input objects
if hen_input_line and hasattr(hen_input_line, 'amount') and isinstance(hen_input_line.amount, (int, float)):
    hen_input_amount = hen_input_line.amount

# Apply if regular employee and HEN hours are positive
if is_regular and hen_input_amount > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for HEN amount ---
result = 0.0
hen_hours = 0.0

# Safely get HEN hours from inputs
hen_input_line = inputs.get('HEN')
if hen_input_line and hasattr(hen_input_line, 'amount') and isinstance(hen_input_line.amount, (int, float)):
    hen_hours = hen_input_line.amount

# Proceed only if regular employee, contract, wage, and HEN hours are valid
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and hen_hours > 0:
    contract_wage = contract.wage
    
    # Calculate ordinary hourly rate (assuming 240 hours per month)
    # TODO: Consider making 240.0 a configurable parameter or deriving from work schedule
    hourly_rate_divisor = 240.0 
    if hourly_rate_divisor > 0:
        hourly_rate = contract_wage / hourly_rate_divisor
    else:
        hourly_rate = 0.0 # Avoid division by zero

    if hourly_rate > 0:
        # Get overtime percentage from company settings
        # Assumes 'overtime_night_hours' field exists in res.company and stores the percentage (e.g., 75 for 75%)
        default_overtime_percentage = 75.0 # Default for HEN
        overtime_percentage = default_overtime_percentage

        if company_obj and hasattr(company_obj, 'overtime_night_hours'):
            company_percentage = company_obj.overtime_night_hours
            if isinstance(company_percentage, (int, float)) and company_percentage >= 0:
                overtime_percentage = company_percentage
            # else: _logger.warning("HEN: company.overtime_night_hours is not a valid number.")
        # else: _logger.warning("HEN: company_obj or company.overtime_night_hours not found, using default.")
        
        # Calculate total HEN value (base hour + surcharge)
        # Formula: hours * hourly_rate * (1 + percentage/100)
        calculated_amount = hen_hours * hourly_rate * (1 + (overtime_percentage / 100.0))
        
        # Standard currency rounding
        if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(calculated_amount)
            else:
                result = round(calculated_amount, 2) # Fallback rounding
        else:
            result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">overtime_night_hours</field> <!-- Categoría correcta para HEN -->
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">input</field>
            <field name="edi_quantity_input_code">HEN</field>
            <field name="edi_percent_select">default</field>
            <field name="edi_percent_company_field">overtime_night_hours</field> <!-- Campo correcto en res.company -->
            <field name="co_partner_select">default</field>
        </record>

        <!-- ============================================= -->
        <!--      REGLA: RECARGO NOCTURNO (RN) - ROBUSTECIDA -->
        <!-- ============================================= -->
        <record id="hr_rule_recargo_nocturno" model="hr.salary.rule">
            <field name="name">Recargo Nocturno</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">40</field> <!-- Ajustada secuencia -->
            <field name="code">RN</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for RN condition ---
result = False
rn_input_amount = 0.0

# Safely get RN hours from inputs
rn_input_line = inputs.get('RN') # inputs is a dict of hr.payslip.input objects
if rn_input_line and hasattr(rn_input_line, 'amount') and isinstance(rn_input_line.amount, (int, float)):
    rn_input_amount = rn_input_line.amount

# Apply if regular employee and RN hours are positive
if is_regular and rn_input_amount > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for RN amount ---
result = 0.0
rn_hours = 0.0

# Safely get RN hours from inputs
rn_input_line = inputs.get('RN')
if rn_input_line and hasattr(rn_input_line, 'amount') and isinstance(rn_input_line.amount, (int, float)):
    rn_hours = rn_input_line.amount

# Proceed only if regular employee, contract, wage, and RN hours are valid
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and rn_hours > 0:
    contract_wage = contract.wage
    
    # Calculate ordinary hourly rate (assuming 240 hours per month)
    # TODO: Consider making 240.0 a configurable parameter or deriving from work schedule
    hourly_rate_divisor = 240.0 
    if hourly_rate_divisor > 0:
        hourly_rate = contract_wage / hourly_rate_divisor
    else:
        hourly_rate = 0.0 # Avoid division by zero

    if hourly_rate > 0:
        # Get night surcharge percentage from company settings
        # Assumes 'hours_night_surcharge' field exists in res.company and stores the percentage (e.g., 35 for 35%)
        default_surcharge_percentage = 35.0 # Default for RN (35% legal)
        surcharge_percentage = default_surcharge_percentage

        if company_obj and hasattr(company_obj, 'hours_night_surcharge'):
            company_percentage = company_obj.hours_night_surcharge
            if isinstance(company_percentage, (int, float)) and company_percentage >= 0:
                surcharge_percentage = company_percentage
            # else: _logger.warning("RN: company.hours_night_surcharge is not a valid number.")
        # else: _logger.warning("RN: company_obj or company.hours_night_surcharge not found, using default.")
        
        # Calculate total RN value (ONLY the surcharge amount)
        # Formula: hours * hourly_rate * (percentage/100)
        calculated_amount = rn_hours * hourly_rate * (surcharge_percentage / 100.0)
        
        # Standard currency rounding
        if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(calculated_amount)
            else:
                result = round(calculated_amount, 2) # Fallback rounding
        else:
            result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">hours_night_surcharge</field> <!-- Categoría correcta para RN -->
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">input</field>
            <field name="edi_quantity_input_code">RN</field>
            <field name="edi_percent_select">default</field>
            <field name="edi_percent_company_field">hours_night_surcharge</field> <!-- Campo correcto en res.company -->
            <field name="co_partner_select">default</field>
        </record>


        <!-- =========================================================== -->
        <!-- REGLA: HORA EXTRA DOMINICAL/FESTIVA DIURNA (HEDDF) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <record id="hr_rule_hora_extra_dom_fest_diurna" model="hr.salary.rule">
            <field name="name">Hora Extra Dominical/Festiva Diurna</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">45</field> <!-- Ajustada secuencia -->
            <field name="code">HEDDF</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for HEDDF condition ---
result = False
heddf_input_amount = 0.0

# Safely get HEDDF hours from inputs
heddf_input_line = inputs.get('HEDDF') # inputs is a dict of hr.payslip.input objects
if heddf_input_line and hasattr(heddf_input_line, 'amount') and isinstance(heddf_input_line.amount, (int, float)):
    heddf_input_amount = heddf_input_line.amount

# Apply if regular employee and HEDDF hours are positive
if is_regular and heddf_input_amount > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for HEDDF amount ---
result = 0.0
heddf_hours = 0.0

# Safely get HEDDF hours from inputs
heddf_input_line = inputs.get('HEDDF')
if heddf_input_line and hasattr(heddf_input_line, 'amount') and isinstance(heddf_input_line.amount, (int, float)):
    heddf_hours = heddf_input_line.amount

# Proceed only if regular employee, contract, wage, and HEDDF hours are valid
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and heddf_hours > 0:
    contract_wage = contract.wage
    
    # Calculate ordinary hourly rate (assuming 240 hours per month)
    # TODO: Consider making 240.0 a configurable parameter or deriving from work schedule
    hourly_rate_divisor = 240.0 
    if hourly_rate_divisor > 0:
        hourly_rate = contract_wage / hourly_rate_divisor
    else:
        hourly_rate = 0.0 # Avoid division by zero

    if hourly_rate > 0:
        # Get HEDDF overtime percentage from company settings
        # Assumes 'sunday_holiday_daily_overtime' field exists in res.company and stores the total percentage (e.g., 100 for 100%)
        default_overtime_percentage = 100.0 # Default for HEDDF (75% dom/fest + 25% extra diurna = 100% recargo)
        overtime_percentage = default_overtime_percentage

        if company_obj and hasattr(company_obj, 'sunday_holiday_daily_overtime'):
            company_percentage = company_obj.sunday_holiday_daily_overtime
            if isinstance(company_percentage, (int, float)) and company_percentage >= 0:
                overtime_percentage = company_percentage
            # else: _logger.warning("HEDDF: company.sunday_holiday_daily_overtime is not a valid number.")
        # else: _logger.warning("HEDDF: company_obj or company.sunday_holiday_daily_overtime not found, using default.")
        
        # Calculate total HEDDF value (base hour + total surcharge)
        # Formula: hours * hourly_rate * (1 + total_percentage_surcharge/100)
        calculated_amount = heddf_hours * hourly_rate * (1 + (overtime_percentage / 100.0))
        
        # Standard currency rounding
        if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(calculated_amount)
            else:
                result = round(calculated_amount, 2) # Fallback rounding
        else:
            result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">sunday_holiday_daily_overtime</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">input</field>
            <field name="edi_quantity_input_code">HEDDF</field>
            <field name="edi_percent_select">default</field>
            <field name="edi_percent_company_field">sunday_holiday_daily_overtime</field> <!-- Asegúrate que este campo existe en res.company y almacena el % total (ej: 100.0) -->
            <field name="co_partner_select">default</field>
        </record>


        <!-- =========================================================== -->
        <!-- REGLA: RECARGO DOMINICAL/FESTIVO DIURNO (RDDF) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <record id="hr_rule_recargo_dom_fest_diurno" model="hr.salary.rule">
            <field name="name">Recargo Dominical/Festivo Diurno</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">50</field> <!-- Ajustada secuencia -->
            <field name="code">RDDF</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for RDDF condition ---
result = False
rddf_input_amount = 0.0

# Safely get RDDF hours from inputs
rddf_input_line = inputs.get('RDDF') # inputs is a dict of hr.payslip.input objects
if rddf_input_line and hasattr(rddf_input_line, 'amount') and isinstance(rddf_input_line.amount, (int, float)):
    rddf_input_amount = rddf_input_line.amount

# Apply if regular employee and RDDF hours are positive
if is_regular and rddf_input_amount > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for RDDF amount ---
result = 0.0
rddf_hours = 0.0

# Safely get RDDF hours from inputs
rddf_input_line = inputs.get('RDDF')
if rddf_input_line and hasattr(rddf_input_line, 'amount') and isinstance(rddf_input_line.amount, (int, float)):
    rddf_hours = rddf_input_line.amount

# Proceed only if regular employee, contract, wage, and RDDF hours are valid
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and rddf_hours > 0:
    contract_wage = contract.wage
    
    # Calculate ordinary hourly rate (assuming 240 hours per month)
    # TODO: Consider making 240.0 a configurable parameter or deriving from work schedule
    hourly_rate_divisor = 240.0 
    if hourly_rate_divisor > 0:
        hourly_rate = contract_wage / hourly_rate_divisor
    else:
        hourly_rate = 0.0 # Avoid division by zero

    if hourly_rate > 0:
        # Get RDDF surcharge percentage from company settings
        # Assumes 'daily_surcharge_hours_sundays_holidays' field exists in res.company and stores the percentage (e.g., 75 for 75%)
        default_surcharge_percentage = 75.0 # Default for RDDF (75% legal)
        surcharge_percentage = default_surcharge_percentage

        if company_obj and hasattr(company_obj, 'daily_surcharge_hours_sundays_holidays'):
            company_percentage = company_obj.daily_surcharge_hours_sundays_holidays
            if isinstance(company_percentage, (int, float)) and company_percentage >= 0:
                surcharge_percentage = company_percentage
            # else: _logger.warning("RDDF: company.daily_surcharge_hours_sundays_holidays is not a valid number.")
        # else: _logger.warning("RDDF: company_obj or company.daily_surcharge_hours_sundays_holidays not found, using default.")
        
        # Calculate total RDDF value (ONLY the surcharge amount)
        # Formula: hours * hourly_rate * (percentage/100)
        calculated_amount = rddf_hours * hourly_rate * (surcharge_percentage / 100.0)
        
        # Standard currency rounding
        if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(calculated_amount)
            else:
                result = round(calculated_amount, 2) # Fallback rounding
        else:
            result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">daily_surcharge_hours_sundays_holidays</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">input</field>
            <field name="edi_quantity_input_code">RDDF</field>
            <field name="edi_percent_select">default</field>
            <field name="edi_percent_company_field">daily_surcharge_hours_sundays_holidays</field> <!-- Asegúrate que este campo existe en res.company -->
            <field name="co_partner_select">default</field>
        </record>

        <!-- =================================================================== -->
        <!-- REGLA: HORA EXTRA DOMINICAL/FESTIVA NOCTURNA (HENDF) - ROBUSTECIDA -->
        <!-- =================================================================== -->
        <record id="hr_rule_hora_extra_dom_fest_nocturna" model="hr.salary.rule">
            <field name="name">Hora Extra Dominical/Festiva Nocturna</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">55</field> <!-- Ajustada secuencia -->
            <field name="code">HENDF</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for HENDF condition ---
result = False
hendf_input_amount = 0.0

# Safely get HENDF hours from inputs
hendf_input_line = inputs.get('HENDF') # inputs is a dict of hr.payslip.input objects
if hendf_input_line and hasattr(hendf_input_line, 'amount') and isinstance(hendf_input_line.amount, (int, float)):
    hendf_input_amount = hendf_input_line.amount

# Apply if regular employee and HENDF hours are positive
if is_regular and hendf_input_amount > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for HENDF amount ---
result = 0.0
hendf_hours = 0.0

# Safely get HENDF hours from inputs
hendf_input_line = inputs.get('HENDF')
if hendf_input_line and hasattr(hendf_input_line, 'amount') and isinstance(hendf_input_line.amount, (int, float)):
    hendf_hours = hendf_input_line.amount

# Proceed only if regular employee, contract, wage, and HENDF hours are valid
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and hendf_hours > 0:
    contract_wage = contract.wage
    
    # Calculate ordinary hourly rate (assuming 240 hours per month)
    # TODO: Consider making 240.0 a configurable parameter or deriving from work schedule
    hourly_rate_divisor = 240.0 
    if hourly_rate_divisor > 0:
        hourly_rate = contract_wage / hourly_rate_divisor
    else:
        hourly_rate = 0.0 # Avoid division by zero

    if hourly_rate > 0:
        # Get HENDF overtime percentage from company settings
        # Assumes 'sunday_night_overtime_holidays' field exists in res.company and stores the total percentage (e.g., 150 for 150%)
        default_overtime_percentage = 150.0 # Default for HENDF (75% dom/fest + 75% extra nocturna = 150% recargo)
        overtime_percentage = default_overtime_percentage

        if company_obj and hasattr(company_obj, 'sunday_night_overtime_holidays'):
            company_percentage = company_obj.sunday_night_overtime_holidays
            if isinstance(company_percentage, (int, float)) and company_percentage >= 0:
                overtime_percentage = company_percentage
            # else: _logger.warning("HENDF: company.sunday_night_overtime_holidays is not a valid number.")
        # else: _logger.warning("HENDF: company_obj or company.sunday_night_overtime_holidays not found, using default.")
        
        # Calculate total HENDF value (base hour + total surcharge)
        # Formula: hours * hourly_rate * (1 + total_percentage_surcharge/100)
        calculated_amount = hendf_hours * hourly_rate * (1 + (overtime_percentage / 100.0))
        
        # Standard currency rounding
        if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(calculated_amount)
            else:
                result = round(calculated_amount, 2) # Fallback rounding
        else:
            result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">sunday_night_overtime_holidays</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">input</field>
            <field name="edi_quantity_input_code">HENDF</field>
            <field name="edi_percent_select">default</field>
            <field name="edi_percent_company_field">sunday_night_overtime_holidays</field> <!-- Asegúrate que este campo existe en res.company y almacena el % total (ej: 150.0) -->
            <field name="co_partner_select">default</field>
        </record>

        <!-- =================================================================== -->
        <!-- REGLA: RECARGO DOMINICAL/FESTIVO NOCTURNO (RNDF) - ROBUSTECIDA -->
        <!-- =================================================================== -->
        <record id="hr_rule_recargo_dom_fest_nocturno" model="hr.salary.rule">
            <field name="name">Recargo Dominical/Festivo Nocturno</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">60</field> <!-- Ajustada secuencia -->
            <field name="code">RNDF</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for RNDF condition ---
result = False
rndf_input_amount = 0.0

# Safely get RNDF hours from inputs
rndf_input_line = inputs.get('RNDF') # inputs is a dict of hr.payslip.input objects
if rndf_input_line and hasattr(rndf_input_line, 'amount') and isinstance(rndf_input_line.amount, (int, float)):
    rndf_input_amount = rndf_input_line.amount

# Apply if regular employee and RNDF hours are positive
if is_regular and rndf_input_amount > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for RNDF amount ---
result = 0.0
rndf_hours = 0.0

# Safely get RNDF hours from inputs
rndf_input_line = inputs.get('RNDF')
if rndf_input_line and hasattr(rndf_input_line, 'amount') and isinstance(rndf_input_line.amount, (int, float)):
    rndf_hours = rndf_input_line.amount

# Proceed only if regular employee, contract, wage, and RNDF hours are valid
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and rndf_hours > 0:
    contract_wage = contract.wage
    
    # Calculate ordinary hourly rate (assuming 240 hours per month)
    # TODO: Consider making 240.0 a configurable parameter or deriving from work schedule
    hourly_rate_divisor = 240.0 
    if hourly_rate_divisor > 0:
        hourly_rate = contract_wage / hourly_rate_divisor
    else:
        hourly_rate = 0.0 # Avoid division by zero

    if hourly_rate > 0:
        # Get RNDF surcharge percentage from company settings
        # Assumes 'sunday_holidays_night_surcharge_hours' field exists in res.company and stores the total percentage (e.g., 110 for 110%)
        default_surcharge_percentage = 110.0 # Default for RNDF (75% dom/fest + 35% nocturno = 110% recargo)
        surcharge_percentage = default_surcharge_percentage

        if company_obj and hasattr(company_obj, 'sunday_holidays_night_surcharge_hours'):
            company_percentage = company_obj.sunday_holidays_night_surcharge_hours
            if isinstance(company_percentage, (int, float)) and company_percentage >= 0:
                surcharge_percentage = company_percentage
            # else: _logger.warning("RNDF: company.sunday_holidays_night_surcharge_hours is not a valid number.")
        # else: _logger.warning("RNDF: company_obj or company.sunday_holidays_night_surcharge_hours not found, using default.")
        
        # Calculate total RNDF value (ONLY the surcharge amount)
        # Formula: hours * hourly_rate * (total_percentage_surcharge/100)
        calculated_amount = rndf_hours * hourly_rate * (surcharge_percentage / 100.0)
        
        # Standard currency rounding
        if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(calculated_amount)
            else:
                result = round(calculated_amount, 2) # Fallback rounding
        else:
            result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">sunday_holidays_night_surcharge_hours</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">input</field>
            <field name="edi_quantity_input_code">RNDF</field>
            <field name="edi_percent_select">default</field>
            <field name="edi_percent_company_field">sunday_holidays_night_surcharge_hours</field> <!-- Asegúrate que este campo existe en res.company y almacena el % total (ej: 110.0) -->
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: VACACIONES DISFRUTADAS (VACDISF) - ROBUSTECIDA  -->
        <!-- =========================================================== -->
        <record id="hr_rule_vacaciones_disfrutadas_auto" model="hr.salary.rule">
            <field name="name">Vacaciones Disfrutadas</field> <!-- Nombre simplificado -->
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">65</field> <!-- Ajustada secuencia -->
            <field name="code">VACDISF</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VACDISF condition ---
result = False
vacation_days = 0.0
# Código del tipo de ausencia para vacaciones disfrutadas (debe coincidir con hr.work.entry.type y hr.leave.type)
vacation_work_entry_code = 'VACDISF'

# Obtener días de vacaciones del objeto worked_days
vacation_line = worked_days.get(vacation_work_entry_code)
if vacation_line and hasattr(vacation_line, 'number_of_days') and isinstance(vacation_line.number_of_days, (int, float)):
    vacation_days = vacation_line.number_of_days

# La condición es verdadera si es empleado regular y hay días de vacaciones > 0
if is_regular and vacation_days > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VACDISF amount ---
result = 0.0
vacation_days = 0.0
vacation_work_entry_code = 'VACDISF' # Debe coincidir con el código en condition_python

# Re-obtener días de vacaciones (ya validados en condición, pero buena práctica)
vacation_line = worked_days.get(vacation_work_entry_code)
if vacation_line and hasattr(vacation_line, 'number_of_days') and isinstance(vacation_line.number_of_days, (int, float)):
    vacation_days = vacation_line.number_of_days

# Proceder solo si es empleado regular, contrato, salario base válido y días de vacaciones > 0
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and vacation_days > 0:
    contract_wage = contract.wage
    
    # TODO: Base de cálculo de vacaciones.
    # La ley indica que es el salario ordinario al momento de disfrutarlas.
    # Para salario variable, es el promedio del último año.
    # Esta implementación simplificada usa el salario base actual del contrato (contract.wage).
    # Considerar un método en hr_payslip.py para un cálculo más preciso de la base de vacaciones.
    # Por ejemplo: base_vacaciones = payslip._get_vacation_base_salary()
    
    base_salary_for_vacations = contract_wage # Simplificación actual
    
    if base_salary_for_vacations > 0:
        daily_rate = base_salary_for_vacations / 30.0 # Tarifa diaria siempre sobre 30
        calculated_amount = vacation_days * daily_rate
        
        # Standard currency rounding
        if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(calculated_amount)
            else:
                result = round(calculated_amount, 2) # Fallback rounding
        else:
            result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">vacation_common</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">VACDISF</field> <!-- Código del hr.work.entry.type -->
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: VACACIONES COMPENSADAS (VACCD) - ROBUSTECIDA         -->
        <!-- =========================================================== -->
        <record id="hr_rule_vacaciones_compensadas" model="hr.salary.rule">
            <field name="name">Vacaciones Compensadas</field> <!-- Nombre simplificado -->
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">70</field> <!-- Ajustada secuencia -->
            <field name="code">VACCD</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VACCD condition ---
result = False
manual_vacc_value = 0.0
pending_days_input = 0.0

# Check for manual value input 'VACCD'
vacc_value_input_line = inputs.get('VACCD')
if vacc_value_input_line and hasattr(vacc_value_input_line, 'amount') and isinstance(vacc_value_input_line.amount, (int, float)):
    manual_vacc_value = vacc_value_input_line.amount

# Check for pending days input 'VACCD_PEND_D' (typically for final settlement)
pending_days_input_line = inputs.get('VACCD_PEND_D')
if pending_days_input_line and hasattr(pending_days_input_line, 'amount') and isinstance(pending_days_input_line.amount, (int, float)):
    pending_days_input = pending_days_input_line.amount

# Determine if it's a final settlement
is_final_settlement = payslip.is_settlement if hasattr(payslip, 'is_settlement') else False

# Condition:
# Apply if regular employee AND
# ( (it's a final settlement AND there are pending days AND contract wage is valid) OR (a manual value > 0 is provided) )
if is_regular:
    if manual_vacc_value > 0:
        result = True
    elif is_final_settlement and pending_days_input > 0 and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VACCD amount ---
result = 0.0
manual_vacc_value = 0.0
pending_days_input = 0.0

# Re-fetch inputs (already validated in condition, but good practice)
vacc_value_input_line = inputs.get('VACCD')
if vacc_value_input_line and hasattr(vacc_value_input_line, 'amount') and isinstance(vacc_value_input_line.amount, (int, float)):
    manual_vacc_value = vacc_value_input_line.amount

pending_days_input_line = inputs.get('VACCD_PEND_D')
if pending_days_input_line and hasattr(pending_days_input_line, 'amount') and isinstance(pending_days_input_line.amount, (int, float)):
    pending_days_input = pending_days_input_line.amount

is_final_settlement = payslip.is_settlement if hasattr(payslip, 'is_settlement') else False

# Priority to manual value input
if manual_vacc_value > 0:
    result = manual_vacc_value
elif is_final_settlement and pending_days_input > 0 and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0:
    # Calculate based on pending days if it's a final settlement and no manual value
    contract_wage = contract.wage
    
    # TODO: Base de cálculo de vacaciones compensadas.
    # La ley indica que es el salario ordinario al momento de la liquidación.
    # Para salario variable, es el promedio del último año.
    # Esta implementación simplificada usa el salario base actual del contrato (contract.wage).
    # Considerar un método en hr_payslip.py para un cálculo más preciso.
    base_salary_for_compensation = contract_wage # Simplificación actual
    
    if base_salary_for_compensation > 0:
        daily_rate = base_salary_for_compensation / 30.0 # Tarifa diaria siempre sobre 30
        calculated_amount = pending_days_input * daily_rate
        result = calculated_amount

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback rounding
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">vacation_compensated</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">input</field>
            <field name="edi_quantity_input_code">VACCD_PEND_D</field> <!-- Reporta días si el cálculo fue por días -->
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--         REGLA: PRIMA DE SERVICIOS (PRIMA) - ROBUSTECIDA     -->
        <!-- =========================================================== -->
        <record id="hr_rule_prima_servicios" model="hr.salary.rule">
            <field name="name">Prima de Servicios</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">105</field> <!-- Ajustada secuencia -->
            <field name="code">PRIMA</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PRIMA condition ---
result = False

# Aplica si es empleado regular
if is_regular and payslip and hasattr(payslip, 'date_to'):
    # Determinar si es mes de pago de prima (Junio o Diciembre)
    is_payout_month = payslip.date_to.month in [6, 12]

    # Determinar si es liquidación final (asume campo 'is_settlement' en hr.payslip)
    is_final_settlement = hasattr(payslip, 'is_settlement') and payslip.is_settlement

    # La regla se activa si es mes de pago O si es liquidación final
    if is_payout_month or is_final_settlement:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PRIMA amount ---
# Llama al método definido en hr.payslip (que ya incluye redondeo estándar)
# El método _calculate_prima_servicios() debe manejar la lógica de base y días.
result = 0.0
if is_regular: # Doble verificación, aunque la condición ya lo hizo.
    try:
        result = payslip._calculate_prima_servicios()
    except Exception as e:
        # _logger.error("Error calculando PRIMA: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>     
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">primas</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field> <!-- La cantidad de días se maneja internamente en el cálculo -->
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: CÁLCULO CESANTÍAS (CESANTIA_CALC) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <record id="hr_rule_cesantias_calculo" model="hr.salary.rule">
            <field name="name">Cálculo Cesantías</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">106</field> <!-- Ajustada secuencia -->
            <field name="code">CESANTIA_CALC</field>
            <field name="category_id" ref="hr_payroll.BASIC"/> <!-- O COMP si es solo cómputo -->
            <field name="condition_select">python</field>
            <field name="condition_python">
               <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for CESANTIA_CALC condition ---
result = False

# Aplica si es empleado regular y es Diciembre o Liquidación Final
if is_regular and payslip and hasattr(payslip, 'date_to'):
    is_december = payslip.date_to.month == 12
    is_final_settlement = hasattr(payslip, 'is_settlement') and payslip.is_settlement

    if is_december or is_final_settlement:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for CESANTIA_CALC amount ---
# Llama al método definido en hr.payslip (que ya incluye redondeo estándar)
# El método _calculate_cesantias() debe manejar la lógica de base y días.
result = 0.0
if is_regular: # Doble verificación, aunque la condición ya lo hizo.
    try:
        result = payslip._calculate_cesantias()
    except Exception as e:
        # _logger.error("Error calculando CESANTIA_CALC: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/> <!-- Es un cálculo, no un pago directo aquí -->
            <!-- Los campos EDI son más relevantes para CESANTIA_PAY si es liquidación -->
            <!-- <field name="type_concept">earn</field> -->
            <!-- <field name="earn_category">layoffs</field> -->
            <!-- <field name="edi_is_detailed" eval="False"/> -->
            <!-- <field name="edi_quantity_select">default</field> -->
            <!-- <field name="edi_percent_select">default</field> -->
            <!-- <field name="co_partner_select">default</field> -->
        </record>

        <!-- =========================================================== -->
        <!--    REGLA: PAGO CESANTÍAS EN LIQUIDACIÓN (CESANTIA_PAY) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <record id="hr_rule_cesantias_pago_liquidacion" model="hr.salary.rule">
            <field name="name">Pago Cesantías Liquidación</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">107</field> <!-- Ajustada secuencia -->
            <field name="code">CESANTIA_PAY</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for CESANTIA_PAY condition ---
result = False
calculated_cesantias = categories.get('CESANTIA_CALC', 0.0) # Obtener valor de la regla de cálculo

# Aplica si es empleado regular, es liquidación final y se calcularon cesantías
is_final_settlement = hasattr(payslip, 'is_settlement') and payslip.is_settlement

if is_regular and is_final_settlement and not float_is_zero(calculated_cesantias, precision_rounding=precision_rounding):
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for CESANTIA_PAY amount ---
# Tomar el valor calculado por la regla CESANTIA_CALC (ya está redondeado)
result = categories.get('CESANTIA_CALC', 0.0)

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="True"/>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">layoffs</field> <!-- Cesantías pagadas en liquidación -->
            <field name="edi_is_detailed" eval="False"/> <!-- El valor ya es el total -->
            <field name="edi_quantity_select">default</field> <!-- La cantidad de días se maneja internamente en el cálculo de CESANTIA_CALC -->
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field> <!-- El pago es al empleado -->
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: INTERESES A LAS CESANTÍAS (INTCES) - ROBUSTECIDA     -->
        <!-- =========================================================== -->
        <record id="hr_rule_intereses_cesantias" model="hr.salary.rule">
            <field name="name">Intereses a las Cesantías</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">108</field> <!-- Ajustada secuencia -->
            <field name="code">INTCES</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for INTCES condition ---
result = False
# Obtener valor de la regla de cálculo de cesantías
calculated_cesantias = categories.get('CESANTIA_CALC', 0.0)

# Aplica si es empleado regular y se calcularon cesantías (CESANTIA_CALC > 0)
# (CESANTIA_CALC ya se activa en Diciembre o Liquidación Final)
if is_regular and not float_is_zero(calculated_cesantias, precision_rounding=precision_rounding):
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for INTCES amount ---
# Llama al método definido en hr.payslip (que ya incluye redondeo estándar)
# El método _calculate_intereses_cesantias() debe usar categories.get('CESANTIA_CALC') internamente.
result = 0.0
if is_regular: # Doble verificación, aunque la condición ya lo hizo.
    try:
        result = payslip._calculate_intereses_cesantias()
    except Exception as e:
        # _logger.error("Error calculando INTCES: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="True"/>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">layoffs_interest</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field>
            <field name="edi_percent_fix">12.0</field> <!-- Porcentaje anual legal -->
            <field name="co_partner_select">default</field> <!-- El pago es al empleado -->
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: LICENCIA MATERNIDAD/PATERNIDAD (LMA) - ROBUSTECIDA   -->
        <!-- =========================================================== -->
        <record id="hr_rule_licencia_maternidad_paternidad" model="hr.salary.rule">
            <field name="name">Licencia Maternidad/Paternidad</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">72</field> <!-- Ajustada secuencia -->
            <field name="code">LMA</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for LMA condition ---
result = False
lma_days = 0.0
# Código del tipo de ausencia para LMA (debe coincidir con hr.work.entry.type y hr.leave.type)
lma_work_entry_code = 'LMA'

# Obtener días de LMA del objeto worked_days
lma_line = worked_days.get(lma_work_entry_code)
if lma_line and hasattr(lma_line, 'number_of_days') and isinstance(lma_line.number_of_days, (int, float)):
    lma_days = lma_line.number_of_days

# La condición es verdadera si es empleado regular y hay días de LMA > 0
if is_regular and lma_days > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for LMA amount ---
result = 0.0
lma_days = 0.0
lma_work_entry_code = 'LMA' # Debe coincidir con el código en condition_python

# Re-obtener días de LMA (ya validados en condición)
lma_line = worked_days.get(lma_work_entry_code)
if lma_line and hasattr(lma_line, 'number_of_days') and isinstance(lma_line.number_of_days, (int, float)):
    lma_days = lma_line.number_of_days

# Llama al método definido en hr.payslip para calcular el subsidio
# Este método debe manejar la lógica de base (IBC mes anterior, etc.) y redondeo.
if is_regular and lma_days > 0: # Doble verificación
    try:
        result = payslip._calculate_lma_subsidy(lma_days)
    except Exception as e:
        # _logger.error("Error calculando LMA: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">licensings_maternity_or_paternity_leaves</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">LMA</field> <!-- Código del hr.work.entry.type -->
            <field name="edi_percent_select">default</field> <!-- El % (100%) está implícito en el cálculo del subsidio -->
            <field name="co_partner_select">default</field> <!-- El pago es al empleado, la empresa recobra a la EPS -->
        </record>

        <!-- =========================================================== -->
        <!--         REGLA: PERMISO REMUNERADO (LR) - ROBUSTECIDA        -->
        <!-- =========================================================== -->
        <record id="hr_rule_permiso_remunerado" model="hr.salary.rule">
            <field name="name">Permiso Remunerado</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">73</field> <!-- Ajustada secuencia -->
            <field name="code">LR</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for LR condition ---
result = False
lr_days = 0.0
# Código del tipo de ausencia para LR (debe coincidir con hr.work.entry.type y hr.leave.type)
lr_work_entry_code = 'LR'

# Obtener días de LR del objeto worked_days
lr_line = worked_days.get(lr_work_entry_code)
if lr_line and hasattr(lr_line, 'number_of_days') and isinstance(lr_line.number_of_days, (int, float)):
    lr_days = lr_line.number_of_days

# La condición es verdadera si es empleado regular y hay días de LR > 0
if is_regular and lr_days > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for LR amount ---
result = 0.0
lr_days = 0.0
lr_work_entry_code = 'LR' # Debe coincidir con el código en condition_python

# Re-obtener días de LR (ya validados en condición)
lr_line = worked_days.get(lr_work_entry_code)
if lr_line and hasattr(lr_line, 'number_of_days') and isinstance(lr_line.number_of_days, (int, float)):
    lr_days = lr_line.number_of_days

# Proceder solo si es empleado regular, contrato, salario base válido y días de LR > 0
if is_regular and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0 and lr_days > 0:
    contract_wage = contract.wage
    
    # Cálculo simple: salario / 30 * días del permiso
    daily_rate = contract_wage / 30.0 # Tarifa diaria siempre sobre 30
    calculated_amount = lr_days * daily_rate
    
    # Standard currency rounding
    if not float_is_zero(calculated_amount, precision_rounding=precision_rounding):
        if payslip and payslip.currency_id:
            result = payslip.currency_id.round(calculated_amount)
        else:
            result = round(calculated_amount, 2) # Fallback rounding
    else:
        result = 0.0

# Ensure result is explicitly 0.0 if it's effectively zero after calculations
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">licensings_permit_or_paid_licenses</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">LR</field> <!-- Código del hr.work.entry.type -->
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field> <!-- Empleador paga -->
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: INCAPACIDAD GENERAL Días 1-2 (IGE1_2) - ROBUSTECIDA  -->
        <!-- =========================================================== -->
        <record id="hr_rule_ige_1_2" model="hr.salary.rule">
            <field name="name">Incapacidad General Días 1-2</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">74</field> <!-- Ajustada secuencia -->
            <field name="code">IGE1_2</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IGE1_2 condition ---
result = False
ige1_2_days = 0.0
# Código del tipo de ausencia para IGE1_2 (debe coincidir con hr.work.entry.type y hr.leave.type)
ige1_2_work_entry_code = 'IGE1_2'

# Obtener días de IGE1_2 del objeto worked_days
ige1_2_line = worked_days.get(ige1_2_work_entry_code)
if ige1_2_line and hasattr(ige1_2_line, 'number_of_days') and isinstance(ige1_2_line.number_of_days, (int, float)):
    ige1_2_days = ige1_2_line.number_of_days

# La condición es verdadera si es empleado regular y hay días de IGE1_2 > 0
if is_regular and ige1_2_days > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IGE1_2 amount ---
result = 0.0
ige1_2_days = 0.0
ige1_2_work_entry_code = 'IGE1_2' # Debe coincidir con el código en condition_python

# Re-obtener días de IGE1_2 (ya validados en condición)
ige1_2_line = worked_days.get(ige1_2_work_entry_code)
if ige1_2_line and hasattr(ige1_2_line, 'number_of_days') and isinstance(ige1_2_line.number_of_days, (int, float)):
    ige1_2_days = ige1_2_line.number_of_days

# Llama al método definido en hr.payslip para calcular el subsidio
# Este método debe manejar la lógica de base (IBC mes anterior, etc.) y redondeo.
if is_regular and ige1_2_days > 0: # Doble verificación
    try:
        # El método _calculate_ige_subsidy_by_code debe estar preparado para 'IGE1_2'
        result = payslip._calculate_ige_subsidy_by_code(ige1_2_work_entry_code, ige1_2_days)
    except Exception as e:
        # _logger.error("Error calculando IGE1_2: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">incapacities_common</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">IGE1_2</field> <!-- Código del hr.work.entry.type -->
            <field name="edi_percent_select">default</field> <!-- El % (66.67%) está implícito en el cálculo del subsidio -->
            <field name="co_partner_select">default</field> <!-- Empleador paga estos días -->
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: INCAPACIDAD GENERAL Días 3-90 (IGE3_90) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <record id="hr_rule_ige_3_90" model="hr.salary.rule">
            <field name="name">Incapacidad General Días 3-90</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">75</field> <!-- Ajustada secuencia -->
            <field name="code">IGE3_90</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IGE3_90 condition ---
result = False
ige3_90_days = 0.0
# Código del tipo de ausencia para IGE3_90 (debe coincidir con hr.work.entry.type y hr.leave.type)
ige3_90_work_entry_code = 'IGE3_90'

# Obtener días de IGE3_90 del objeto worked_days
ige3_90_line = worked_days.get(ige3_90_work_entry_code)
if ige3_90_line and hasattr(ige3_90_line, 'number_of_days') and isinstance(ige3_90_line.number_of_days, (int, float)):
    ige3_90_days = ige3_90_line.number_of_days

# La condición es verdadera si es empleado regular y hay días de IGE3_90 > 0
if is_regular and ige3_90_days > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IGE3_90 amount ---
result = 0.0
ige3_90_days = 0.0
ige3_90_work_entry_code = 'IGE3_90' # Debe coincidir con el código en condition_python

# Re-obtener días de IGE3_90 (ya validados en condición)
ige3_90_line = worked_days.get(ige3_90_work_entry_code)
if ige3_90_line and hasattr(ige3_90_line, 'number_of_days') and isinstance(ige3_90_line.number_of_days, (int, float)):
    ige3_90_days = ige3_90_line.number_of_days

# Llama al método definido en hr.payslip para calcular el subsidio
if is_regular and ige3_90_days > 0: # Doble verificación
    try:
        # El método _calculate_ige_subsidy_by_code debe estar preparado para 'IGE3_90'
        result = payslip._calculate_ige_subsidy_by_code(ige3_90_work_entry_code, ige3_90_days)
    except Exception as e:
        # _logger.error("Error calculando IGE3_90: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">incapacities_common</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">IGE3_90</field> <!-- Código del hr.work.entry.type -->
            <field name="edi_percent_select">default</field> <!-- El % (66.67%) está implícito en el cálculo del subsidio -->
            <field name="co_partner_select">default</field> <!-- El pago en nómina es al empleado, la empresa recobra a la EPS -->
        </record>

        <!-- ============================================================= -->
        <!-- REGLA: INCAPACIDAD GENERAL Días 91-180 (IGE91_180) - ROBUSTECIDA -->
        <!-- ============================================================= -->
        <record id="hr_rule_ige_91_180" model="hr.salary.rule">
            <field name="name">Incapacidad General Días 91-180</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">76</field> <!-- Ajustada secuencia -->
            <field name="code">IGE91_180</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IGE91_180 condition ---
result = False
ige91_180_days = 0.0
# Código del tipo de ausencia para IGE91_180 (debe coincidir con hr.work.entry.type y hr.leave.type)
ige91_180_work_entry_code = 'IGE91_180'

# Obtener días de IGE91_180 del objeto worked_days
ige91_180_line = worked_days.get(ige91_180_work_entry_code)
if ige91_180_line and hasattr(ige91_180_line, 'number_of_days') and isinstance(ige91_180_line.number_of_days, (int, float)):
    ige91_180_days = ige91_180_line.number_of_days

# La condición es verdadera si es empleado regular y hay días de IGE91_180 > 0
if is_regular and ige91_180_days > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IGE91_180 amount ---
result = 0.0
ige91_180_days = 0.0
ige91_180_work_entry_code = 'IGE91_180' # Debe coincidir con el código en condition_python

# Re-obtener días de IGE91_180 (ya validados en condición)
ige91_180_line = worked_days.get(ige91_180_work_entry_code)
if ige91_180_line and hasattr(ige91_180_line, 'number_of_days') and isinstance(ige91_180_line.number_of_days, (int, float)):
    ige91_180_days = ige91_180_line.number_of_days

# Llama al método definido en hr.payslip para calcular el subsidio
if is_regular and ige91_180_days > 0: # Doble verificación
    try:
        # El método _calculate_ige_subsidy_by_code debe estar preparado para 'IGE91_180'
        result = payslip._calculate_ige_subsidy_by_code(ige91_180_work_entry_code, ige91_180_days)
    except Exception as e:
        # _logger.error("Error calculando IGE91_180: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">incapacities_common</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">IGE91_180</field> <!-- Código del hr.work.entry.type -->
            <field name="edi_percent_select">default</field> <!-- El % (50%) está implícito en el cálculo del subsidio -->
            <field name="co_partner_select">default</field> <!-- El pago en nómina es al empleado, la empresa recobra a la EPS -->
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: INCAPACIDAD GENERAL Días 181+ (IGE181_MAS) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <record id="hr_rule_ige_181_mas" model="hr.salary.rule">
            <field name="name">Incapacidad General Días 181+</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">77</field> <!-- Ajustada secuencia -->
            <field name="code">IGE181_MAS</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IGE181_MAS condition ---
result = False
ige181_mas_days = 0.0
# Código del tipo de ausencia para IGE181_MAS (debe coincidir con hr.work.entry.type y hr.leave.type)
ige181_mas_work_entry_code = 'IGE181_MAS'

# Obtener días de IGE181_MAS del objeto worked_days
ige181_mas_line = worked_days.get(ige181_mas_work_entry_code)
if ige181_mas_line and hasattr(ige181_mas_line, 'number_of_days') and isinstance(ige181_mas_line.number_of_days, (int, float)):
    ige181_mas_days = ige181_mas_line.number_of_days

# La condición es verdadera si es empleado regular y hay días de IGE181_MAS > 0
if is_regular and ige181_mas_days > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IGE181_MAS amount ---
result = 0.0
ige181_mas_days = 0.0
ige181_mas_work_entry_code = 'IGE181_MAS' # Debe coincidir con el código en condition_python

# Re-obtener días de IGE181_MAS (ya validados en condición)
ige181_mas_line = worked_days.get(ige181_mas_work_entry_code)
if ige181_mas_line and hasattr(ige181_mas_line, 'number_of_days') and isinstance(ige181_mas_line.number_of_days, (int, float)):
    ige181_mas_days = ige181_mas_line.number_of_days

# Llama al método definido en hr.payslip para calcular el subsidio
if is_regular and ige181_mas_days > 0: # Doble verificación
    try:
        # El método _calculate_ige_subsidy_by_code debe estar preparado para 'IGE181_MAS'
        result = payslip._calculate_ige_subsidy_by_code(ige181_mas_work_entry_code, ige181_mas_days)
    except Exception as e:
        # _logger.error("Error calculando IGE181_MAS: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">incapacities_common</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">IGE181_MAS</field> <!-- Código del hr.work.entry.type -->
            <field name="edi_percent_select">default</field> <!-- El % (50%) está implícito en el cálculo del subsidio -->
            <field name="co_partner_select">code</field> <!-- El pago en nómina es al empleado, la empresa recobra al Fondo de Pensiones -->
            <field name="co_partner_python_compute">
                <![CDATA[
# Partner es el Fondo de Pensión asignado en el contrato
result = contract.pension_id.partner_id.id if contract and contract.pension_id and contract.pension_id.partner_id else None
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: INCAPACIDAD LABORAL (ATEP) - ROBUSTECIDA        -->
        <!-- =========================================================== -->
        <record id="hr_rule_incapacidad_laboral" model="hr.salary.rule">
            <field name="name">Incapacidad Laboral (AT/EP)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">78</field> <!-- Ajustada secuencia -->
            <field name="code">ATEP</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ATEP condition ---
result = False
atep_days = 0.0
# Código del tipo de ausencia para ATEP (debe coincidir con hr.work.entry.type y hr.leave.type)
atep_work_entry_code = 'ATEP'

# Obtener días de ATEP del objeto worked_days
atep_line = worked_days.get(atep_work_entry_code)
if atep_line and hasattr(atep_line, 'number_of_days') and isinstance(atep_line.number_of_days, (int, float)):
    atep_days = atep_line.number_of_days

# La condición es verdadera si es empleado regular y hay días de ATEP > 0
if is_regular and atep_days > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ATEP amount ---
result = 0.0
atep_days = 0.0
atep_work_entry_code = 'ATEP' # Debe coincidir con el código en condition_python

# Re-obtener días de ATEP (ya validados en condición)
atep_line = worked_days.get(atep_work_entry_code)
if atep_line and hasattr(atep_line, 'number_of_days') and isinstance(atep_line.number_of_days, (int, float)):
    atep_days = atep_line.number_of_days

# Llama al método definido en hr.payslip para calcular el subsidio
if is_regular and atep_days > 0: # Doble verificación
    try:
        # El método _calculate_atep_subsidy debe estar preparado para calcular el 100% del IBC
        result = payslip._calculate_atep_subsidy(atep_days)
    except Exception as e:
        # _logger.error("Error calculando ATEP: %s", str(e)) # Descomentar si tienes _logger
        result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">incapacities_working</field>
            <field name="edi_is_detailed" eval="True"/>
            <field name="edi_quantity_select">worked_days</field>
            <field name="edi_quantity_worked_days_code">ATEP</field> <!-- Código del hr.work.entry.type -->
            <field name="edi_percent_select">default</field> <!-- El % (100%) está implícito en el cálculo del subsidio -->
            <field name="co_partner_select">code</field> <!-- El pago en nómina es al empleado, la empresa recobra a la ARL -->
            <field name="co_partner_python_compute">
                <![CDATA[
# Partner es la ARL asignada en el contrato
result = contract.arl_id.partner_id.id if contract and hasattr(contract, 'arl_id') and contract.arl_id and contract.arl_id.partner_id else None
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: BONIFICACIÓN SALARIAL (BON_S - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <record id="hr_rule_bonificacion_salarial" model="hr.salary.rule">
            <field name="name">Bonificación Salarial</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">80</field> <!-- Ajustada secuencia -->
            <field name="code">BON_S</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for BON_S condition ---
result = False
# Aplica si es empleado regular y existe un item recurrente activo para esta regla.
if is_regular:
    RecurringItem = payslip.env.get('hr.employee.recurring.item')
    if RecurringItem:
        domain = [
            ('employee_id', '=', employee.id),
            ('contract_id', '=', contract.id),
            ('recurring_item_type_id.salary_rule_id', '=', rule.id),
            ('active', '=', True),
            ('date_start', '<=', payslip.date_to),
            '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
            '|', ('use_installments', '=', False),
                 '&', ('use_installments', '=', True),
                      '|', ('remaining_installments', '>', 0),
                           ('remaining_balance', '>', 0.0)
        ]
        if RecurringItem.search_count(domain) > 0:
            result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for BON_S amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback to amount if no base rule code
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay
        # La actualización del saldo/cuotas del item recurrente debería manejarse
        # idealmente fuera de la regla salarial (ej. en el modelo hr.employee.recurring.item
        # o mediante una acción posterior a la confirmación de la nómina).

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback rounding
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">bonuses</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =================================================================== -->
        <!-- REGLA: BONIFICACIÓN NO SALARIAL (BON_NS - Recurrente) - ROBUSTECIDA -->
        <!-- =================================================================== -->
        <record id="hr_rule_bonificacion_no_salarial" model="hr.salary.rule">
            <field name="name">Bonificación No Salarial</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">81</field> <!-- Ajustada secuencia -->
            <field name="code">BON_NS</field>
            <field name="category_id" ref="hr_payroll.ALW"/> <!-- Allowance -->
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for BON_NS condition ---
result = False
# Aplica si es empleado regular y existe un item recurrente activo para esta regla.
if is_regular: # Podría aplicar también a otros tipos si la lógica de negocio lo permite
    RecurringItem = payslip.env.get('hr.employee.recurring.item')
    if RecurringItem:
        domain = [
            ('employee_id', '=', employee.id),
            ('contract_id', '=', contract.id),
            ('recurring_item_type_id.salary_rule_id', '=', rule.id),
            ('active', '=', True),
            ('date_start', '<=', payslip.date_to),
            '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
            '|', ('use_installments', '=', False),
                 '&', ('use_installments', '=', True),
                      '|', ('remaining_installments', '>', 0),
                           ('remaining_balance', '>', 0.0)
        ]
        if RecurringItem.search_count(domain) > 0:
            result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for BON_NS amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback rounding
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">bonuses_non_salary</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--            REGLA: COMISIONES (COMISION) - ROBUSTECIDA       -->
        <!-- =========================================================== -->
        <record id="hr_rule_comisiones" model="hr.salary.rule">
            <field name="name">Comisiones</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">62</field>
            <field name="code">COMISION</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COMISION condition ---
result = False
comision_value = 0.0
comision_input_obj = inputs.get('COMISION') # 'inputs' es un dict de objetos hr.payslip.input del preámbulo

if comision_input_obj and hasattr(comision_input_obj, 'amount') and isinstance(comision_input_obj.amount, (int, float)):
    comision_value = comision_input_obj.amount

if comision_value > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COMISION amount ---
result = 0.0
comision_input_obj = inputs.get('COMISION') # 'inputs' es un dict de objetos hr.payslip.input del preámbulo

if comision_input_obj and hasattr(comision_input_obj, 'amount') and isinstance(comision_input_obj.amount, (int, float)):
    result = comision_input_obj.amount

# El valor de entrada ya debería tener la precisión correcta.
# No se aplica redondeo adicional aquí, se toma el valor de entrada tal cual.
# Si se quisiera forzar un redondeo (aunque usualmente no es necesario para inputs directos):
# if not float_is_zero(result, precision_rounding=precision_rounding):
#     if payslip and payslip.currency_id:
#         result = payslip.currency_id.round(result)
#     else:
#         result = round(result, 2) # Fallback
# else:
#     result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">commissions</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--   REGLA: COMPENSACIÓN ORDINARIA (COMP_ORD - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_compensacion_ordinaria" model="hr.salary.rule">
            <field name="name">Compensación Ordinaria</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">70</field>
            <field name="code">COMP_ORD</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COMP_ORD condition ---
result = False
# Aplica si existe un item recurrente activo para esta regla.
# La lógica de tipo de empleado (is_regular, etc.) podría usarse aquí si el concepto solo aplica a ciertos tipos.
# Por ahora, se asume que si el item recurrente existe y está activo, la condición es True.
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Busca por la regla actual (COMP_ORD)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False

if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True
            is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COMP_ORD amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                # Fallback si no hay código de regla base, usar el monto del item como base (o definir otro comportamiento)
                base_value = recurring_item.amount
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay
        
        # NOTA IMPORTANTE: La actualización del saldo restante (remaining_balance)
        # o las cuotas restantes (remaining_installments) del 'recurring_item'
        # NO debe hacerse aquí. Debe manejarse después de que la nómina se confirme,
        # por ejemplo, en un método _post_process_payslip_lines() en hr.payslip.

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">compensations_ordinary</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: COMPENSACIÓN EXTRAORDINARIA (COMP_EXT - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_compensacion_extraordinaria" model="hr.salary.rule">
            <field name="name">Compensación Extraordinaria</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">71</field>
            <field name="code">COMP_EXT</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COMP_EXT condition ---
result = False
# This rule applies if a recurring item is active for it.
# Employee type checks (e.g., is_regular) could be added here if the concept
# itself is restricted, beyond just the existence of the recurring item.
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (COMP_EXT)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COMP_EXT amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                # Fallback if no base rule code, use the item's amount as base
                base_value = recurring_item.amount
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay
        
        # IMPORTANT NOTE: Updating the remaining_balance or remaining_installments
        # of the 'recurring_item' should NOT be done here. It should be handled
        # after the payslip is confirmed.

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">compensations_extraordinary</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: VALES GENÉRICOS (VOUCHER - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_vales_genericos" model="hr.salary.rule">
            <field name="name">Vales Genéricos</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">72</field>
            <field name="code">VOUCHER</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VOUCHER condition ---
result = False
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (VOUCHER)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VOUCHER amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">vouchers</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: VALES NO SALARIALES (VOUCHER_NS - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <record id="hr_rule_vales_no_salariales" model="hr.salary.rule">
            <field name="name">Vales No Salariales</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">73</field>
            <field name="code">VOUCHER_NS</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VOUCHER_NS condition ---
result = False
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (VOUCHER_NS)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VOUCHER_NS amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">vouchers_non_salary</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: VALES ALIMENTACIÓN SALARIALES (VOUCHER_SF - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_vales_alimentacion_salariales" model="hr.salary.rule">
            <field name="name">Vales Alimentación Salariales</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">74</field>
            <field name="code">VOUCHER_SF</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VOUCHER_SF condition ---
result = False
# Optional: Uncomment if this concept only applies to regular employees
# if not is_regular:
#     result = False
# else:
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (VOUCHER_SF)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VOUCHER_SF amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay
        # IMPORTANT NOTE: Updating recurring item balance/installments should be handled post-payslip confirmation.

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">vouchers_salary_food</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: VALES ALIMENTACIÓN NO SALARIALES (VOUCHER_NSF - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_vales_alimentacion_no_salariales" model="hr.salary.rule">
            <field name="name">Vales Alimentación No Salariales</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">75</field>
            <field name="code">VOUCHER_NSF</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VOUCHER_NSF condition ---
result = False
# Optional: Uncomment if this concept only applies to regular employees
# if not is_regular:
#     result = False
# else:
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (VOUCHER_NSF)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VOUCHER_NSF amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">vouchers_non_salary_food</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: AUXILIO SALARIAL (ASSIST - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_auxilio_salarial" model="hr.salary.rule">
            <field name="name">Auxilio Salarial</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">76</field>
            <field name="code">ASSIST</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ASSIST condition ---
result = False
# Optional: Uncomment if this concept only applies to regular employees
# if not is_regular:
#     result = False
# else:
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (ASSIST)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ASSIST amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">assistances</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>


        <!-- =========================================================== -->
        <!-- REGLA: AUXILIO NO SALARIAL (ASSIST_NS - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_auxilio_no_salarial" model="hr.salary.rule">
            <field name="name">Auxilio No Salarial</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">77</field>
            <field name="code">ASSIST_NS</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ASSIST_NS condition ---
result = False
# Optional: Uncomment if this concept only applies to regular employees
# if not is_regular:
#     result = False
# else:
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (ASSIST_NS)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ASSIST_NS amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay
        # IMPORTANT NOTE: Updating recurring item balance/installments should be handled post-payslip confirmation.

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">assistances_non_salary</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>


        <!-- =========================================================== -->
        <!-- REGLA: DOTACIÓN EN DINERO (DOTACION - Recurrente) - ROBUSTECIDA -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_dotacion" model="hr.salary.rule">
            <field name="name">Dotación (Pago en Dinero)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">78</field>
            <field name="code">DOTACION</field>
            <field name="category_id" ref="hr_payroll.BASIC"/> <!-- Considerar ALW si es estrictamente no salarial -->
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for DOTACION condition ---
result = False
# La lógica de a quién aplica la dotación (ej. empleados que ganan hasta X SMMLV)
# debería estar implícita en la creación del item recurrente.
# Aquí solo verificamos si el item recurrente existe y está activo.
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (DOTACION)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for DOTACION amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
                '&', ('use_installments', '=', True),
                    '|', ('remaining_installments', '>', 0),
                        ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">endowment</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: APOYO SOSTENIMIENTO (APOYO_SOST - Revisado Auto)     -->
        <!-- =========================================================== -->
        <record id="hr_rule_apoyo_sostenimiento" model="hr.salary.rule">
            <field name="name">Apoyo Sostenimiento (Aprendiz SENA)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">79</field>
            <field name="code">APOYO_SOST</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <!-- Condición: Aplicar si el tipo de trabajador es Aprendiz SENA (lectiva o productiva) -->
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# Define variables and fetch common data safely for THIS RULE'S SCRIPT
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)


# --- Employee Type Determination ---
# Define flags to easily identify the employee type
is_regular = False # Default: Not Integral, Not Apprentice
is_integral = False # Default: Salario Integral
is_apprentice_lectiva = False # Default: Aprendiz SENA Etapa Lectiva (code '4')
is_apprentice_productiva = False # Default: Aprendiz SENA Etapa Productiva / Prácticas (code '5')
is_any_apprentice = False # Convenience flag for any apprentice

if contract: # Ensure contract exists before accessing its fields
    # Check for Integral first (higher priority)
    # Use hasattr for safe check if 'integral_salary' field exists on hr.contract
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    # Then check for Apprentice types if not Integral
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Check against DIAN Code '4'
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5': # Check against DIAN Code '5'
            is_apprentice_productiva = True
            is_any_apprentice = True

    # If not Integral and not any Apprentice type, it's a Regular employee
    if not is_integral and not is_any_apprentice:
        is_regular = True


# --- Fetching key values from categories (Results of rules with lower sequence) ---
# Access calculated values from previous rules using categories.get(CODE, default_value)
# Ensure that the rules you get values from have a lower 'sequence' number
# than the current rule, otherwise their value will be 0.0 here.
# ibc = categories.get('IBC', 0.0) # IBC (seq 100) is NOT available yet for APOYO_SOST (seq 79)


# --- Company specific values ---
# Define and fetch common company-related values safely
smmlv = 0.0 # Default Salario Mínimo Mensual Legal Vigente
uvt_value = 0.0 # Default Valor Unidad de Valor Tributario
is_exonerated_company = False # Default for company exoneration (Ley 1607 - Art. 114-1 E.T.)

company_obj = contract.company_id if contract else None # Get company record safely

if company_obj: # Ensure company record exists
    # Access SMMLV safely
    if hasattr(company_obj, 'smmlv_value'): # Use hasattr as smmlv_value might be from a custom module/field
        # Check if the value is numeric and positive
        if isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
            smmlv = company_obj.smmlv_value

    # Access UVT safely
    if hasattr(company_obj, 'uvt_value'): # Use hasattr for safe check
         # Check if the value is numeric and positive
        if isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
             uvt_value = company_obj.uvt_value

    # Access Ley 1607 exoneration flag safely
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        # Get the boolean value
        is_exonerated_company = bool(company_obj.ley_1607)


# --- Common helper variables ---
# Access currency rounding and decimal places safely
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01 # Default rounding
precision_rounding = currency_rounding # Use standard term
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for APOYO_SOST condition ---
# Aplica si el tipo de contrato es Aprendizaje ('4') o Prácticas/Pasantías ('5')
result = False
if is_apprentice_lectiva or is_apprentice_productiva: # Uses flags from preamble
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <!-- Cálculo Automático: % SMMLV según etapa, prorrateado por días a liquidar, con override manual -->
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# Define variables and fetch common data safely for THIS RULE'S SCRIPT
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)


# --- Employee Type Determination ---
# Define flags to easily identify the employee type
is_regular = False # Default: Not Integral, Not Apprentice
is_integral = False # Default: Salario Integral
is_apprentice_lectiva = False # Default: Aprendiz SENA Etapa Lectiva (code '4')
is_apprentice_productiva = False # Default: Aprendiz SENA Etapa Productiva / Prácticas (code '5')
is_any_apprentice = False # Convenience flag for any apprentice

if contract: # Ensure contract exists before accessing its fields
    # Check for Integral first (higher priority)
    # Use hasattr for safe check if 'integral_salary' field exists on hr.contract
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    # Then check for Apprentice types if not Integral
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Check against DIAN Code '4'
            is_apprentice_lectiva = True
            is_any_apprentice = True
        elif contract_type_code == '5': # Check against DIAN Code '5'
            is_apprentice_productiva = True
            is_any_apprentice = True

    # If not Integral and not any Apprentice type, it's a Regular employee
    if not is_integral and not is_any_apprentice:
        is_regular = True


# --- Fetching key values from categories (Results of rules with lower sequence) ---
# Access calculated values from previous rules using categories.get(CODE, default_value)
# Ensure that the rules you get values from have a lower 'sequence' number
# than the current rule, otherwise their value will be 0.0 here.
# ibc = categories.get('IBC', 0.0) # IBC (seq 100) is NOT available yet for APOYO_SOST (seq 79)


# --- Company specific values ---
# Define and fetch common company-related values safely
smmlv = 0.0 # Default Salario Mínimo Mensual Legal Vigente
uvt_value = 0.0 # Default Valor Unidad de Valor Tributario
is_exonerated_company = False # Default for company exoneration (Ley 1607 - Art. 114-1 E.T.)

company_obj = contract.company_id if contract else None # Get company record safely

if company_obj: # Ensure company record exists
    # Access SMMLV safely
    if hasattr(company_obj, 'smmlv_value'): # Use hasattr as smmlv_value might be from a custom module/field
        # Check if the value is numeric and positive
        if isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
            smmlv = company_obj.smmlv_value

    # Access UVT safely
    if hasattr(company_obj, 'uvt_value'): # Use hasattr for safe check
         # Check if the value is numeric and positive
        if isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
             uvt_value = company_obj.uvt_value

    # Access Ley 1607 exoneration flag safely
    if hasattr(company_obj, 'ley_1607'): # Assumes a boolean field 'ley_1607' on res.company
        # Get the boolean value
        is_exonerated_company = bool(company_obj.ley_1607)


# --- Common helper variables ---
# Access currency rounding and decimal places safely
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01 # Default rounding
precision_rounding = currency_rounding # Use standard term
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for APOYO_SOST amount ---
result = 0.0
calculated_support = 0.0 # Variable para el cálculo automático

# Calcular valor base del apoyo (priorizar contract.wage si existe y > 0)
base_apoyo_mensual = 0.0
if contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > 0:
    base_apoyo_mensual = contract.wage

if float_is_zero(base_apoyo_mensual, precision_rounding=precision_rounding):
    # Si contract.wage es 0 o no es un número válido, calcular el mínimo legal basado en % SMMLV, si SMMLV está disponible
    if smmlv > 0:
        percentage = 0.0
        if is_apprentice_lectiva: # Flag from preamble
            percentage = 0.50 # 50% para etapa lectiva
        elif is_apprentice_productiva: # Flag from preamble
            percentage = 0.75 # 75% para etapa productiva (regla general)
            # La condición de 100% SMMLV por tasa de desempleo < 10% o ser universitario
            # requeriría un parámetro/configuración adicional.
            # Por ahora, se usa el 75% como base para productiva si wage es 0.

        if percentage > 0:
             base_apoyo_mensual = smmlv * percentage
        # else:
            # _logger.info(f"APOYO_SOST para {employee.name}: No se pudo determinar porcentaje SMMLV para aprendiz.")
    # else:
        # _logger.warning(f"APOYO_SOST para {employee.name}: SMMLV no configurado o es cero. No se puede calcular apoyo mínimo.")


# Calcular días a liquidar (base 30 - ausencias no remuneradas)
days_to_liquidate = 30.0
# worked_days es un dict de objetos WorkedDayLine, no de hr.payslip.worked_days
# La forma correcta de acceder es worked_days.values() si es un dict de Odoo
# o directamente si es una lista de objetos.
# Asumiendo que worked_days es el dict de Odoo:
worked_days_dict = {wd.code: wd for wd in worked_days.values()} if worked_days else {}

unpaid_leave_codes = ['LNR', 'SUS'] # Ajustar si es necesario
unpaid_leave_days = 0.0
for code in unpaid_leave_codes:
    wd_line = worked_days_dict.get(code)
    if wd_line and hasattr(wd_line, 'number_of_days'):
        try: unpaid_leave_days += float(wd_line.number_of_days or 0.0)
        except (ValueError, TypeError): pass
days_to_liquidate = max(0.0, 30.0 - unpaid_leave_days)

# Calcular valor prorrateado (sobre base_apoyo_mensual)
if days_to_liquidate > 0 and base_apoyo_mensual > 0:
     calculated_support = (base_apoyo_mensual / 30.0) * days_to_liquidate


# Inicializar resultado con el cálculo automático prorrateado
result = calculated_support

# Permitir anulación con entrada manual APOYO_SOST si se proporciona (Input Type)
manual_support_value = 0.0
# inputs es un dict de objetos hr.payslip.input
apoyo_sost_input_line = inputs.get('APOYO_SOST') if inputs else None
if apoyo_sost_input_line and hasattr(apoyo_sost_input_line, 'amount'):
    try:
        manual_value_from_input = float(apoyo_sost_input_line.amount or 0.0)
        if manual_value_from_input > 0: # Solo sobreescribir si el valor manual es positivo
            manual_support_value = manual_value_from_input
    except (ValueError, TypeError):
        # _logger.warning(f"APOYO_SOST manual para {employee.name}: Valor de input type no numerico: {apoyo_sost_input_line.amount}")
        pass

# Si se proporcionó un valor manual positivo, usarlo
if manual_support_value > 0:
    result = manual_support_value # Sobreescribir el cálculo automático


# Redondear resultado final
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">sustainment_support</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">code</field> <!-- Reportar % aplicado -->
            <field name="edi_percent_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for APOYO_SOST EDI percent ---
percentage = 0.0
# is_apprentice_lectiva and is_apprentice_productiva vienen del preámbulo
# smmlv también viene del preámbulo

if is_apprentice_lectiva:
    percentage = 50.0 # Porcentaje mínimo legal reportable para lectiva
elif is_apprentice_productiva:
    percentage = 75.0 # Porcentaje mínimo legal reportable para productiva
    # CORRECCIÓN ADICIONAL (Norma Nomina Electronica): Si el salario pactado (> 2 SMMLV), se reporta 100%
    # smmlv ya está definido en el preámbulo
    if smmlv > 0 and contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) and contract.wage > (2 * smmlv): # Si el salario pactado (wage) supera 2 SMMLV
            percentage = 100.0 # Porcentaje reportable para ese caso

result = percentage
                ]]>
            </field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: AUXILIO TELETRABAJO (TELEWORK_AUX - Recurrente)      -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_auxilio_teletrabajo" model="hr.salary.rule">
            <field name="name">Auxilio Teletrabajo</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">80</field>
            <field name="code">TELEWORK_AUX</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for TELEWORK_AUX condition ---
result = False
# This rule applies if a recurring item is active for it.
# Employee type checks (e.g., is_regular) could be added here if the concept
# itself is restricted, beyond just the existence of the recurring item.
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (TELEWORK_AUX)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for TELEWORK_AUX amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)

        # --- Consider Prorrateo (Descomentar y ajustar si es necesario) ---
        prorate = False # Cambia a True si necesitas prorratear
        if prorate:
             # Calcular días a liquidar (base 30 - ausencias no remuneradas)
             days_to_liquidate = 30.0
             worked_days_dict = {wd.code: wd for wd in worked_days.values()} if worked_days else {}
             unpaid_leave_codes = ['LNR', 'SUS'] # Ajustar si es necesario
             unpaid_leave_days = 0.0
             for code_unpaid in unpaid_leave_codes:
                 wd_line = worked_days_dict.get(code_unpaid)
                 if wd_line and hasattr(wd_line, 'number_of_days'):
                     try: unpaid_leave_days += float(wd_line.number_of_days or 0.0)
                     except (ValueError, TypeError): pass
             days_to_liquidate = max(0.0, 30.0 - unpaid_leave_days)

             if days_to_liquidate > 0 and amount_to_pay > 0:
                 result = (amount_to_pay / 30.0) * days_to_liquidate
             else:
                 result = 0.0
        else:
             result = amount_to_pay # Si no se prorratea, usar directamente
        # --- Fin Considerar Prorrateo ---

        # La actualización del saldo/cuotas del item recurrente debe manejarse
        # idealmente fuera de la regla salarial (ej. en una acción posterior).

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">telecommuting</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: BONIFICACIÓN POR RETIRO (BON_RETIRO)            -->
        <!-- =========================================================== -->
        <record id="hr_rule_bonificacion_retiro" model="hr.salary.rule">
            <field name="name">Bonificación por Retiro</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">81</field>
            <field name="code">BON_RETIRO</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for BON_RETIRO condition ---
result = False
bon_retiro_value = 0.0

# Safely get BON_RETIRO value from inputs
bon_retiro_input_line = inputs.get('BON_RETIRO') # inputs is a dict of hr.payslip.input objects
if bon_retiro_input_line and hasattr(bon_retiro_input_line, 'amount'):
    try:
        bon_retiro_value = float(bon_retiro_input_line.amount or 0.0)
    except (ValueError, TypeError):
        bon_retiro_value = 0.0

# Check if it's a final settlement (ensure payslip.is_settlement exists and is boolean)
is_final_settlement = False
if hasattr(payslip, 'is_settlement'):
    is_final_settlement = bool(payslip.is_settlement)

# Condition: Applies only in final settlement AND if a positive value is provided in the input.
if is_final_settlement and bon_retiro_value > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for BON_RETIRO amount ---
result = 0.0

# Safely get BON_RETIRO value from inputs (already validated in condition, but good practice)
bon_retiro_input_line = inputs.get('BON_RETIRO')
if bon_retiro_input_line and hasattr(bon_retiro_input_line, 'amount'):
    try:
        result = float(bon_retiro_input_line.amount or 0.0)
    except (ValueError, TypeError):
        result = 0.0

# No additional rounding needed as it's taken directly from input.
# Ensure it's explicitly 0.0 if it was not a valid number or zero.
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">company_withdrawal_bonus</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--            REGLA: REINTEGRO (REINTEGRO)                     -->
        <!-- =========================================================== -->
        <record id="hr_rule_reintegro" model="hr.salary.rule">
            <field name="name">Reintegro</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">82</field>
            <field name="code">REINTEGRO</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for REINTEGRO condition ---
result = False
reintegro_value = 0.0

# Safely get REINTEGRO value from inputs
reintegro_input_line = inputs.get('REINTEGRO') # inputs is a dict of hr.payslip.input objects
if reintegro_input_line and hasattr(reintegro_input_line, 'amount'):
    try:
        reintegro_value = float(reintegro_input_line.amount or 0.0)
    except (ValueError, TypeError):
        reintegro_value = 0.0

# Condition: Applies if a positive value is provided in the input.
if reintegro_value > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for REINTEGRO amount ---
result = 0.0

# Safely get REINTEGRO value from inputs (already validated in condition)
reintegro_input_line = inputs.get('REINTEGRO')
if reintegro_input_line and hasattr(reintegro_input_line, 'amount'):
    try:
        result = float(reintegro_input_line.amount or 0.0)
    except (ValueError, TypeError):
        result = 0.0

# No additional rounding needed as it's taken directly from input.
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">refund</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: VIÁTICO SALARIAL (VIATICO_S - Recurrente)       -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_viatico_salarial" model="hr.salary.rule">
            <field name="name">Viático Salarial (Manutención y Alojamiento)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">83</field>
            <field name="code">VIATICO_S</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VIATICO_S condition ---
result = False
# This rule applies if a recurring item is active for it.
# Employee type checks (e.g., is_regular) could be added here if the concept
# itself is restricted, beyond just the existence of the recurring item.
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (VIATICO_S)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VIATICO_S amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay
        # La actualización del saldo/cuotas del item recurrente debe manejarse
        # idealmente fuera de la regla salarial.

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">transports_viatic</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: VIÁTICO NO SALARIAL (VIATICO_NS - Recurrente)        -->
        <!-- =========================================================== -->
        <!-- Requiere modelo hr.employee.recurring.item -->
        <record id="hr_rule_viatico_no_salarial" model="hr.salary.rule">
            <field name="name">Viático No Salarial (Transporte y Representación)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">84</field>
            <field name="code">VIATICO_NS</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VIATICO_NS condition ---
result = False
# This rule applies if a recurring item is active for it.
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Searches for current rule (VIATICO_NS)
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for VIATICO_NS amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_pay = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_pay = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_pay = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_pay = min(amount_to_pay, recurring_item.remaining_balance)
        
        result = amount_to_pay
        # La actualización del saldo/cuotas del item recurrente debe manejarse
        # idealmente fuera de la regla salarial.

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">transports_non_salary_viatic</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--        REGLA: OTRO CONCEPTO SALARIAL (OTRO_S)               -->
        <!-- =========================================================== -->
        <record id="hr_rule_otro_concepto_salarial" model="hr.salary.rule">
            <field name="name">Otro Concepto Salarial</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">90</field>
            <field name="code">OTRO_S</field>
            <field name="category_id" ref="hr_payroll.BASIC"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for OTRO_S condition ---
result = False
otro_s_value = 0.0

# Safely get OTRO_S value from inputs
otro_s_input_line = inputs.get('OTRO_S') # inputs is a dict of hr.payslip.input objects
if otro_s_input_line and hasattr(otro_s_input_line, 'amount'):
    try:
        otro_s_value = float(otro_s_input_line.amount or 0.0)
    except (ValueError, TypeError):
        otro_s_value = 0.0

# Condition: Applies if a positive value is provided in the input.
if otro_s_value > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for OTRO_S amount ---
result = 0.0

# Safely get OTRO_S value from inputs (already validated in condition)
otro_s_input_line = inputs.get('OTRO_S')
if otro_s_input_line and hasattr(otro_s_input_line, 'amount'):
    try:
        result = float(otro_s_input_line.amount or 0.0)
    except (ValueError, TypeError):
        result = 0.0

# No additional rounding needed as it's taken directly from input.
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">other_concepts</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: OTRO CONCEPTO NO SALARIAL (OTRO_NS)             -->
        <!-- =========================================================== -->
        <record id="hr_rule_otro_concepto_no_salarial" model="hr.salary.rule">
            <field name="name">Otro Concepto No Salarial</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">91</field>
            <field name="code">OTRO_NS</field>
            <field name="category_id" ref="hr_payroll.ALW"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for OTRO_NS condition ---
result = False
otro_ns_value = 0.0

# Safely get OTRO_NS value from inputs
otro_ns_input_line = inputs.get('OTRO_NS') # inputs is a dict of hr.payslip.input objects
if otro_ns_input_line and hasattr(otro_ns_input_line, 'amount'):
    try:
        otro_ns_value = float(otro_ns_input_line.amount or 0.0)
    except (ValueError, TypeError):
        otro_ns_value = 0.0

# Condition: Applies if a positive value is provided in the input.
if otro_ns_value > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for OTRO_NS amount ---
result = 0.0

# Safely get OTRO_NS value from inputs (already validated in condition)
otro_ns_input_line = inputs.get('OTRO_NS')
if otro_ns_input_line and hasattr(otro_ns_input_line, 'amount'):
    try:
        result = float(otro_ns_input_line.amount or 0.0)
    except (ValueError, TypeError):
        result = 0.0

# No additional rounding needed as it's taken directly from input.
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">earn</field>
            <field name="earn_category">other_concepts_non_salary</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: INGRESO BASE DE COTIZACIÓN (IBC) - Condición Ajustada para Integral    -->
        <!-- =========================================================== -->
        <record id="hr_rule_ingreso_base_cotizacion" model="hr.salary.rule">
            <field name="name">Ingreso Base de Cotización (IBC)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">100</field>
            <field name="code">IBC</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IBC condition ---
# La regla aplica si hay contrato Y NO es aprendiz (ninguna etapa)
result = False
if contract and not is_any_apprentice: # is_any_apprentice from preamble
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <!-- El cálculo llama al método _calculate_ibc, que ahora maneja el caso Integral -->
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# (Included for consistency, though not all variables are directly used by the one-liner below)
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for IBC amount ---
# Llama al método _calculate_ibc definido en hr.payslip
# Este método debe manejar el cálculo para Integral y No Integral, y retornar 0 para Aprendices.
# El método _calculate_ibc() ya debería incluir el redondeo necesario.
result = 0.0
try:
    result = payslip._calculate_ibc()
except Exception as e:
    # _logger.error("Error calculando IBC: %s", str(e)) # Descomentar si tienes _logger
    result = 0.0

# Asegurar que el resultado sea explícitamente 0.0 si es efectivamente cero
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
        </record>

        <!-- ============================================= -->
        <!-- REGLA: Deducción Salud Empleado (Reg/Int) -->
        <!-- Código: SALUD_EMP o SALUD_EMP_REG -->
        <!-- ============================================= -->
        <record id="hr_rule_deduction_salud_empleado_reg_int" model="hr.salary.rule">
            <field name="name">Deducción Salud Empleado (4%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">109</field> <!-- Secuencia después de bases y devengos -->
            <field name="code">SALUD_EMP</field> <!-- O SALUD_EMP_REG si prefieres un código más específico -->
            <field name="category_id" ref="hr_payroll.DED"/> <!-- Categoría Deducción -->
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para SALUD_EMP (seq 109)
apoyo_sost = categories.get('APOYO_SOST', 0.0) # APOYO_SOST (seq 79) - DISPONIBLE

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALUD_EMP condition ---
# Condición: Aplica a Empleados Regulares o Integrales
# CRÍTICO: Debe tener la EPS asignada en el contrato Y un IBC > 0.
result = False
# ibc, is_regular, is_integral son del preámbulo
if contract and hasattr(contract, 'eps_id') and contract.eps_id: # Debe tener EPS asignada
    if (is_regular or is_integral) and not float_is_zero(ibc, precision_rounding=precision_rounding):
        result = True # Aplica si es Regular o Integral y hay IBC y EPS
# NOTA: No aplica a Aprendices (is_any_apprentice sería True para ellos).
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # abs()
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALUD_EMP amount ---
result = 0.0 # Monto de la deducción

# La condición ya aseguró que es Regular o Integral, tiene EPS y IBC > 0
# La base es el IBC (que ya es 70% para Integral si aplica, y topado)
# ibc es del preámbulo
base_deduccion = ibc

# Cálculo de la deducción (4% sobre la base)
if not float_is_zero(base_deduccion, precision_rounding=precision_rounding):
    monto_calculado = base_deduccion * 0.04

    # Redondeo estándar de moneda.
    if not float_is_zero(monto_calculado, precision_rounding=precision_rounding):
        if payslip and payslip.currency_id:
            result = payslip.currency_id.round(monto_calculado)
        else:
            result = round(monto_calculado, 2) # Fallback
    # else: result remains 0.0
else:
    result = 0.0

# El resultado debe ser NEGATIVO para una deducción
result = -abs(result)
                ]]>
            </field>
            <field name="appears_on_payslip" eval="True"/> <!-- Debe aparecer en la colilla -->
            <field name="type_concept">deduction</field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="deduction_category">health</field> <!-- Código DIAN para Salud -->
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field> <!-- Reportar % fijo -->
            <field name="edi_percent_fix">4.0</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                 <![CDATA[
# Partner es la EPS asignada en el contrato
result = contract.eps_id.partner_id.id if contract and hasattr(contract, 'eps_id') and contract.eps_id and hasattr(contract.eps_id, 'partner_id') and contract.eps_id.partner_id else None
                 ]]>
             </field>
        </record>

        <!-- ============================================= -->
        <!-- REGLA: Deducción Salud Empleado (Aprendiz Prod) -->
        <!-- Código: SALUD_EMP_APR -->
        <!-- ============================================= -->
        <record id="hr_rule_deduction_salud_empleado_apr_prod" model="hr.salary.rule">
            <field name="name">Deducción Salud Empleado (Aprendiz Prod. 4%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">110</field> <!-- Secuencia después de bases y devengos -->
            <field name="code">SALUD_EMP_APR</field>
            <field name="category_id" ref="hr_payroll.DED"/> <!-- Categoría Deducción -->
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0) # APOYO_SOST (seq 79) - DISPONIBLE para SALUD_EMP_APR (seq 110)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALUD_EMP_APR condition ---
# Condición: Aplica solo a Aprendiz Productiva
# CRÍTICO: Debe tener la EPS asignada en el contrato Y un apoyo de sostenimiento > 0.
result = False
# is_apprentice_productiva y apoyo_sost son del preámbulo
if contract and hasattr(contract, 'eps_id') and contract.eps_id: # Debe tener EPS asignada
    if is_apprentice_productiva and not float_is_zero(apoyo_sost, precision_rounding=precision_rounding):
        result = True # Aplica si es Aprendiz Productiva y hay Apoyo y EPS
# NOTA: No aplica a Regulares, Integrales o Aprendices Lectiva.
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # abs()
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0) # APOYO_SOST (seq 79)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALUD_EMP_APR amount ---
result = 0.0 # Monto de la deducción

# La condición ya aseguró que es Aprendiz Productiva, tiene EPS y Apoyo > 0
# La base es el valor del Apoyo de Sostenimiento calculado previamente por APOYO_SOST
# apoyo_sost es del preámbulo
base_deduccion = apoyo_sost

# Cálculo de la deducción (4% sobre la base)
if not float_is_zero(base_deduccion, precision_rounding=precision_rounding):
    monto_calculado = base_deduccion * 0.04

    # Redondeo estándar de moneda
    if not float_is_zero(monto_calculado, precision_rounding=precision_rounding):
        if payslip and payslip.currency_id:
            result = payslip.currency_id.round(monto_calculado)
        else:
            result = round(monto_calculado, 2) # Fallback
    # else: result remains 0.0
else:
    result = 0.0

# El resultado debe ser NEGATIVO para una deducción
result = -abs(result)
                ]]>
            </field>
            <field name="appears_on_payslip" eval="True"/> <!-- Debe aparecer en la colilla -->
            <field name="type_concept">deduction</field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="deduction_category">health</field> <!-- Código DIAN para Salud -->
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field> <!-- Reportar % fijo -->
            <field name="edi_percent_fix">4.0</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                 <![CDATA[
# Partner es la EPS asignada en el contrato
result = contract.eps_id.partner_id.id if contract and hasattr(contract, 'eps_id') and contract.eps_id and hasattr(contract.eps_id, 'partner_id') and contract.eps_id.partner_id else None
                 ]]>
             </field>
        </record>

        <!-- ============================================= -->
        <!-- REGLA: Deducción Pensión Empleado (Reg/Int) -->
        <!-- Código: PENSION_EMP -->
        <!-- ============================================= -->
        <record id="hr_rule_deduccion_pension_empleado" model="hr.salary.rule">
            <field name="name">Deducción Pensión Empleado (4%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">111</field> <!-- Secuencia después de Salud Emp -->
            <field name="code">PENSION_EMP</field>
            <field name="category_id" ref="hr_payroll.DED"/> <!-- Categoría Deducción -->
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para PENSION_EMP (seq 111)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PENSION_EMP condition ---
# Condición: Aplica a Empleados Regulares o Integrales
# CRÍTICO: Debe tener el Fondo de Pensión asignado en el contrato Y un IBC > 0.
result = False
# ibc, is_regular, is_integral son del preámbulo
if contract and hasattr(contract, 'pension_id') and contract.pension_id: # Debe tener Fondo de Pensión asignado
    if (is_regular or is_integral) and not float_is_zero(ibc, precision_rounding=precision_rounding):
        result = True # Aplica si es Regular o Integral y hay IBC y Fondo
# NOTA: No aplica a Aprendices.
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # abs()
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PENSION_EMP amount ---
result = 0.0 # Monto de la deducción

# La condición ya aseguró que es Regular o Integral, tiene Fondo y IBC > 0
# La base es el IBC
# ibc es del preámbulo
base_deduccion = ibc

# Cálculo de la deducción (4% sobre la base)
if not float_is_zero(base_deduccion, precision_rounding=precision_rounding):
    monto_calculado = base_deduccion * 0.04

    # Redondeo estándar de moneda
    if not float_is_zero(monto_calculado, precision_rounding=precision_rounding):
        if payslip and payslip.currency_id:
            result = payslip.currency_id.round(monto_calculado)
        else:
            result = round(monto_calculado, 2) # Fallback
    # else: result remains 0.0
else:
    result = 0.0

# El resultado debe ser NEGATIVO para una deducción
result = -abs(result)
                ]]>
            </field>
            <field name="appears_on_payslip" eval="True"/> <!-- Debe aparecer en la colilla -->
            <field name="type_concept">deduction</field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="deduction_category">pension_fund</field> <!-- Código DIAN para Pensión -->
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field> <!-- Reportar % fijo -->
            <field name="edi_percent_fix">4.0</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                 <![CDATA[
# Partner es el Fondo de Pensión asignado en el contrato
result = contract.pension_id.partner_id.id if contract and hasattr(contract, 'pension_id') and contract.pension_id and hasattr(contract.pension_id, 'partner_id') and contract.pension_id.partner_id else None
                 ]]>
             </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: FSP - SOLIDARIDAD (Variable %) (FSP_SOL) - AJUSTADA                -->
        <!-- =========================================================== -->
        <record id="hr_rule_fsp_solidaridad" model="hr.salary.rule">
            <field name="name">Fondo Solidaridad Pensional (Variable %)</field> <!-- Nombre actualizado -->
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">112</field> <!-- Ajustada secuencia para estar después de PENSION_EMP -->
            <field name="code">FSP_SOL</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para FSP_SOL (seq 112)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for FSP_SOL condition ---
result = False
# Aplica a Empleados Regulares o Integrales (quienes no son aprendices)
# CRÍTICO: Debe tener el Fondo de Pensión asignado en el contrato (para la entidad)
# Y un IBC >= 4 SMMLV.

# Umbral mínimo para FSP (4 SMMLV)
fsp_threshold = 0.0
if smmlv > 0:
    fsp_threshold = 4.0 * smmlv

# ibc, is_any_apprentice, smmlv son del preámbulo
if contract and hasattr(contract, 'pension_id') and contract.pension_id and fsp_threshold > 0: # Debe tener Fondo de Pensión y SMMLV válido
    # Aplica si NO es Aprendiz Y el IBC >= Umbral FSP
    if not is_any_apprentice and not float_is_zero(ibc, precision_rounding=precision_rounding) and ibc >= fsp_threshold:
        result = True # Aplica si es Regular/Integral y el IBC supera el umbral FSP
# NOTA: No aplica a Aprendices ni si IBC es menor a 4 SMMLV.
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # ceil(), abs()
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for FSP_SOL amount ---
result = 0.0 # Monto de la deducción

# La condición ya aseguró que NO es Aprendiz, tiene Fondo, IBC >= 4 SMMLV
# La base es el IBC
# ibc, smmlv son del preámbulo
base_deduccion = ibc

# --- Calcular porcentaje FSP según rango de IBC ---
percentage_fsp = 0.0
if not float_is_zero(smmlv, precision_rounding=precision_rounding) and base_deduccion > 0:
    ibc_smmlv_ratio = base_deduccion / smmlv # Relación IBC / SMMLV

    if ibc_smmlv_ratio >= 20.0: # Más de 20 SMMLV
        percentage_fsp = 0.02 # 2%
    elif ibc_smmlv_ratio >= 19.0: # 19 a <20 SMMLV
        percentage_fsp = 0.018 # 1.8%
    elif ibc_smmlv_ratio >= 18.0: # 18 a <19 SMMLV
        percentage_fsp = 0.016 # 1.6%
    elif ibc_smmlv_ratio >= 17.0: # 17 a <18 SMMLV
        percentage_fsp = 0.014 # 1.4%
    elif ibc_smmlv_ratio >= 16.0: # 16 a <17 SMMLV
        percentage_fsp = 0.012 # 1.2%
    elif ibc_smmlv_ratio >= 4.0: # 4 a <16 SMMLV (La condición ya asegura >= 4)
        percentage_fsp = 0.01 # 1%

# Cálculo de la deducción
if not float_is_zero(base_deduccion, precision_rounding=precision_rounding) and percentage_fsp > 0:
    monto_calculado = base_deduccion * percentage_fsp

    # Redondeo PILA a la centena superior
    if not float_is_zero(monto_calculado, precision_rounding=precision_rounding):
        result = math.ceil(monto_calculado / 100.0) * 100.0
    # else: result remains 0.0
else:
    result = 0.0

# El resultado debe ser NEGATIVO para una deducción
result = -abs(result)
                ]]>
            </field>
            <field name="appears_on_payslip" eval="True"/> <!-- Debe aparecer en la colilla -->
            <field name="type_concept">deduction</field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="deduction_category">pension_security_fund</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">code</field> <!-- Reportar % aplicado -->
            <field name="edi_percent_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for FSP_SOL EDI percent ---
# ibc, smmlv son del preámbulo
percentage_fsp = 0.0
if not float_is_zero(smmlv, precision_rounding=precision_rounding) and ibc > 0:
    ibc_smmlv_ratio = ibc / smmlv

    if ibc_smmlv_ratio >= 20.0: percentage_fsp = 2.0
    elif ibc_smmlv_ratio >= 19.0: percentage_fsp = 1.8
    elif ibc_smmlv_ratio >= 18.0: percentage_fsp = 1.6
    elif ibc_smmlv_ratio >= 17.0: percentage_fsp = 1.4
    elif ibc_smmlv_ratio >= 16.0: percentage_fsp = 1.2
    elif ibc_smmlv_ratio >= 4.0: percentage_fsp = 1.0

result = percentage_fsp
                ]]>
            </field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                 <![CDATA[
# Partner es el Fondo de Pensión asignado en el contrato
result = contract.pension_id.partner_id.id if contract and hasattr(contract, 'pension_id') and contract.pension_id and hasattr(contract.pension_id, 'partner_id') and contract.pension_id.partner_id else None
                 ]]>
             </field>
        </record>

        <!-- =========================================================== -->
        <!--   REGLA: FSP - SUBSISTENCIA (Adicional) (FSP_SUB)           -->
        <!-- =========================================================== -->
        <record id="hr_rule_fsp_subsistencia" model="hr.salary.rule">
            <field name="name">Fondo Solidaridad Pensional - Subsistencia</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">113</field>
            <field name="code">FSP_SUB</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para FSP_SUB (seq 113)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for FSP_SUB condition ---
result = False
# ibc, smmlv, is_any_apprentice son del preámbulo
# Aplica si NO es aprendiz y IBC >= 16 SMMLV
fsp_sub_threshold = 0.0
if smmlv > 0:
    fsp_sub_threshold = 16.0 * smmlv

if contract and hasattr(contract, 'pension_id') and contract.pension_id and fsp_sub_threshold > 0: # Debe tener Fondo de Pensión y SMMLV válido
    if not is_any_apprentice and not float_is_zero(ibc, precision_rounding=precision_rounding) and ibc >= fsp_sub_threshold:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # ceil(), abs()
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for FSP_SUB amount ---
result = 0.0
# ibc, smmlv son del preámbulo
base_deduccion = ibc
additional_percentage = 0.0

if not float_is_zero(smmlv, precision_rounding=precision_rounding) and base_deduccion > 0:
    ibc_smmlv_ratio = base_deduccion / smmlv

    # Usar float_compare para comparaciones seguras
    if float_compare(ibc_smmlv_ratio, 20.0, precision_rounding=precision_rounding) >= 0: # >= 20 SMMLV
        additional_percentage = 0.01 # 1%
    elif float_compare(ibc_smmlv_ratio, 19.0, precision_rounding=precision_rounding) >= 0: # >= 19 y < 20 SMMLV
        additional_percentage = 0.008 # 0.8%
    elif float_compare(ibc_smmlv_ratio, 18.0, precision_rounding=precision_rounding) >= 0: # >= 18 y < 19 SMMLV
        additional_percentage = 0.006 # 0.6%
    elif float_compare(ibc_smmlv_ratio, 17.0, precision_rounding=precision_rounding) >= 0: # >= 17 y < 18 SMMLV
        additional_percentage = 0.004 # 0.4%
    elif float_compare(ibc_smmlv_ratio, 16.0, precision_rounding=precision_rounding) >= 0: # >= 16 y < 17 SMMLV
        additional_percentage = 0.002 # 0.2%

    if additional_percentage > 0:
        monto_calculado = base_deduccion * additional_percentage
        # Redondeo PILA a la centena superior
        if not float_is_zero(monto_calculado, precision_rounding=precision_rounding):
            result = math.ceil(monto_calculado / 100.0) * 100.0
        # else: result remains 0.0
    # else: result remains 0.0
else:
    result = 0.0

# El resultado debe ser NEGATIVO para una deducción
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">pension_security_fund_subsistence</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">code</field>
            <field name="edi_percent_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for FSP_SUB EDI percent ---
# ibc, smmlv son del preámbulo
percentage = 0.0
if not float_is_zero(smmlv, precision_rounding=precision_rounding) and ibc > 0:
    ibc_smmlv_ratio = ibc / smmlv
    if float_compare(ibc_smmlv_ratio, 20.0, precision_rounding=precision_rounding) >= 0: percentage = 1.0
    elif float_compare(ibc_smmlv_ratio, 19.0, precision_rounding=precision_rounding) >= 0: percentage = 0.8
    elif float_compare(ibc_smmlv_ratio, 18.0, precision_rounding=precision_rounding) >= 0: percentage = 0.6
    elif float_compare(ibc_smmlv_ratio, 17.0, precision_rounding=precision_rounding) >= 0: percentage = 0.4
    elif float_compare(ibc_smmlv_ratio, 16.0, precision_rounding=precision_rounding) >= 0: percentage = 0.2
result = percentage
                ]]>
            </field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# Partner es el Fondo de Pensión asignado en el contrato
result = contract.pension_id.partner_id.id if contract and hasattr(contract, 'pension_id') and contract.pension_id and hasattr(contract.pension_id, 'partner_id') and contract.pension_id.partner_id else None
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: DEDUCCIÓN PENSIÓN VOLUNTARIA (PENSION_VOL - Recurrente) -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_pension_voluntaria" model="hr.salary.rule">
            <field name="name">Deducción Pensión Voluntaria</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">114</field>
            <field name="code">PENSION_VOL</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PENSION_VOL condition ---
result = False
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id), # Busca por regla PENSION_VOL
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # abs()
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PENSION_VOL amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Usar amount como base si no hay código
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)
        
        # Standard currency rounding for the deduction amount
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
        
        # Result must be negative for a deduction
        result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">voluntary_pension</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PENSION_VOL co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: RETENCIÓN EN LA FUENTE (RETEFUENTE) - ¡¡REVISAR!! -->
        <!-- =========================================================== -->
        <record id="hr_rule_retencion_fuente" model="hr.salary.rule">
            <field name="name">Retención en la Fuente (Proc. 1)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">150</field>
            <field name="code">RETEFUENTE</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# ... Add other categories as needed, ensuring they are calculated before this rule's sequence

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for RETEFUENTE condition ---
# Verificar existencia de contrato y uvt_value del preámbulo
result = bool(contract and uvt_value > 0)
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # abs()
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for RETEFUENTE amount ---
result = 0.0
# Llama al método definido en hr.payslip (que ya incluye redondeo estándar)
# El método _calculate_retefuente() debe devolver un valor positivo.
try:
    calculated_value = payslip._calculate_retefuente()
    if not float_is_zero(calculated_value, precision_rounding=precision_rounding):
        result = calculated_value
except Exception as e:
    # _logger.error(f"Error calculando RETEFUENTE para {employee.name}: {str(e)}")
    result = 0.0

# El resultado debe ser NEGATIVO para una deducción
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">withholding_source</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: DEDUCCIÓN APORTE AFC (AFC - Recurrente)         -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_afc" model="hr.salary.rule">
            <field name="name">Deducción Aporte AFC</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">151</field>
            <field name="code">AFC</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for AFC condition ---
result = False
# Consider adding employee type check if AFC is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for AFC amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)
        
        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
        
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">afc</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for AFC co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

       <!-- =========================================================== -->
        <!-- REGLA: DEDUCCIÓN COOPERATIVA (COOPERATIVA - Recurrente)     -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_cooperativa" model="hr.salary.rule">
            <field name="name">Deducción Cooperativa</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">152</field>
            <field name="code">COOPERATIVA</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COOPERATIVA condition ---
result = False
# Consider adding employee type check if COOPERATIVA is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COOPERATIVA amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">cooperative</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for COOPERATIVA co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: DEDUCCIÓN EMBARGO FISCAL (EMBARGO_FISCAL - Recurrente) -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_embargo_fiscal" model="hr.salary.rule">
            <field name="name">Deducción Embargo Fiscal</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">153</field>
            <field name="code">EMBARGO_FISCAL</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for EMBARGO_FISCAL condition ---
result = False
# Consider adding employee type check if EMBARGO_FISCAL is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <!-- CÁLCULO REQUIERE VALIDACIÓN DE LÍMITES LEGALES DE EMBARGABILIDAD -->
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for EMBARGO_FISCAL amount ---
# ############################################################
# ## ¡¡¡ATENCIÓN: CÁLCULO DE EMBARGO SIMPLIFICADO!!!       ##
# ## Esta lógica toma el valor del item recurrente PERO    ##
# ## NO aplica límites legales de embargabilidad (ej: %    ##
# ## sobre excedente del SMMLV, reglas especiales para    ##
# ## alimentos/cooperativas). ¡¡VALIDAR E IMPLEMENTAR!!   ##
# ############################################################
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # --- ¡¡AQUÍ DEBERÍA IR LA VALIDACIÓN DE LÍMITES LEGALES!! ---
        # Ejemplo conceptual (NO COMPLETO):
        # smmlv_val = smmlv # from preamble
        # salary_base_for_garnishment = categories.get('NET', 0.0) # O la base legal correcta
        # legal_limit = payslip._calculate_garnishment_limit(salary_base_for_garnishment, smmlv_val, recurring_item.embargo_type if hasattr(recurring_item, 'embargo_type') else None)
        # amount_to_deduct = min(amount_to_deduct, legal_limit)
        # --- Fin Ejemplo Conceptual ---
        
        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0

result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">tax_lien</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for EMBARGO_FISCAL co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: DEDUCCIÓN LIBRANZA (LIBRANZA - Recurrente)      -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_libranza" model="hr.salary.rule">
            <field name="name">Deducción Libranza</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">154</field>
            <field name="code">LIBRANZA</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for LIBRANZA condition ---
result = False
# Consider adding employee type check if LIBRANZA is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for LIBRANZA amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">libranzas</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for LIBRANZA co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

       <!-- =========================================================== -->
        <!-- REGLA: DEDUCCIÓN PLAN COMPLEMENTARIO (PLAN_COMP - Recurrente) -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_plan_comp" model="hr.salary.rule">
            <field name="name">Deducción Plan Complementario Salud</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">155</field>
            <field name="code">PLAN_COMP</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PLAN_COMP condition ---
result = False
# Consider adding employee type check if PLAN_COMP is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PLAN_COMP amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">complementary_plans</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PLAN_COMP co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--     REGLA: DEDUCCIÓN EDUCACIÓN (EDUCACION - Recurrente)     -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_educacion" model="hr.salary.rule">
            <field name="name">Deducción Educación</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">156</field>
            <field name="code">EDUCACION</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for EDUCACION condition ---
result = False
# Consider adding employee type check if EDUCACION is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for EDUCACION amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">education</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for EDUCACION co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--        REGLA: DEDUCCIÓN DEUDA (DEUDA - Recurrente)          -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_deuda" model="hr.salary.rule">
            <field name="name">Deducción Deuda</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">157</field>
            <field name="code">DEUDA</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for DEUDA condition ---
result = False
# Consider adding employee type check if DEUDA is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for DEUDA amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">debt</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for DEUDA co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--   REGLA: DEDUCCIÓN SINDICATO (SINDICATO - Recurrente)       -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_sindicato" model="hr.salary.rule">
            <field name="name">Deducción Cuota Sindical</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">158</field>
            <field name="code">SINDICATO</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SINDICATO condition ---
result = False
# Consider adding employee type check if SINDICATO is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SINDICATO amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                # Fallback a SALARIO o wage si no hay código base
                # 'contract' and 'categories' are available from the preamble
                base_value = categories.get('SALARIO', contract.wage if contract and hasattr(contract, 'wage') else 0.0)
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">trade_unions</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SINDICATO co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: DEDUCCIÓN SANCIÓN PÚBLICA (SANCION_PUB - Recurrente) -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_sancion_pub" model="hr.salary.rule">
            <field name="name">Deducción Sanción Pública</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">159</field>
            <field name="code">SANCION_PUB</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SANCION_PUB condition ---
result = False
# Consider adding employee type check if SANCION_PUB is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
             <!-- CÁLCULO PUEDE REQUERIR VALIDACIÓN DE LÍMITES LEGALES -->
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SANCION_PUB amount ---
# (Lógica estándar para item recurrente - ¡Validar límites legales de deducción por sanción!)
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # --- ¡¡AQUÍ VALIDAR LÍMITES LEGALES SI APLICA!! ---
        # legal_limit = payslip._calculate_sanction_limit(...) # Asumiendo un método helper
        # amount_to_deduct = min(amount_to_deduct, legal_limit)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">sanctions_public</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SANCION_PUB co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: DEDUCCIÓN SANCIÓN PRIVADA (SANCION_PRIV - Recurrente) -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_sancion_priv" model="hr.salary.rule">
            <field name="name">Deducción Sanción Privada</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">160</field>
            <field name="code">SANCION_PRIV</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SANCION_PRIV condition ---
result = False
# Consider adding employee type check if SANCION_PRIV is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <!-- CÁLCULO PUEDE REQUERIR VALIDACIÓN DE LÍMITES LEGALES/REGLAMENTO -->
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SANCION_PRIV amount ---
# (Lógica estándar para item recurrente - ¡Validar límites legales/reglamento interno!)
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # --- ¡¡AQUÍ VALIDAR LÍMITES LEGALES/REGLAMENTO INTERNO!! ---
        # legal_limit = payslip._calculate_private_sanction_limit(...) # Asumiendo un método helper
        # amount_to_deduct = min(amount_to_deduct, legal_limit)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">sanctions_private</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SANCION_PRIV co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: DEDUCCIÓN PAGO A TERCEROS (PAGO_TERCERO - Recurrente) -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_pago_tercero" model="hr.salary.rule">
            <field name="name">Deducción Pago a Terceros</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">161</field>
            <field name="code">PAGO_TERCERO</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PAGO_TERCERO condition ---
result = False
# Consider adding employee type check if PAGO_TERCERO is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # abs() is used below
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PAGO_TERCERO amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)

        # 'precision_rounding' and 'payslip' are available from the preamble
        if not float_is_zero(amount_to_deduct, precision_rounding=precision_rounding):
            if payslip and payslip.currency_id:
                result = payslip.currency_id.round(amount_to_deduct)
            else:
                result = round(amount_to_deduct, 2) # Fallback
        else:
            result = 0.0
            
result = -abs(result)
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">third_party_payments</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PAGO_TERCERO co_partner ---
partner_id = None
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item and recurring_item.recurring_item_type_id and \
       hasattr(recurring_item.recurring_item_type_id, 'partner_id') and \
       recurring_item.recurring_item_type_id.partner_id:
        partner_id = recurring_item.recurring_item_type_id.partner_id.id
result = partner_id
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--     REGLA: DEDUCCIÓN ANTICIPO (ANTICIPO - Recurrente)       -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_anticipo" model="hr.salary.rule">
            <field name="name">Deducción Anticipo</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">162</field>
            <field name="code">ANTICIPO</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # For abs(), ceil() if needed by specific logic (not used here)
# import logging # Optional
# _logger = logging.getLogger(__name__) # Optional

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed
# ... Add other categories as needed ...

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ANTICIPO condition ---
result = False
# Consider adding employee type check if ANTICIPO is restricted (e.g., if not is_regular: result = False else: ...)
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # For abs()
# import logging # Optional
# _logger = logging.getLogger(__name__) # Optional

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed
# ... Add other categories as needed ...

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ANTICIPO amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                # 'categories' is available from the preamble
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)
        
        result = amount_to_deduct
        # (Actualización de saldo/cuotas si aplica - IMPORTANTE para anticipos)
        # La actualización del saldo/cuotas del item recurrente debería manejarse
        # idealmente fuera de la regla salarial (ej. en el modelo hr.employee.recurring.item
        # o mediante una acción posterior a la confirmación de la nómina).

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
result = -abs(result) # Ensure negative for deduction
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">advances</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field> <!-- Anticipo es interno -->
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: DEDUCCIÓN REINTEGRO (REINTEGRO_DED - Recurrente)     -->
        <!-- =========================================================== -->
        <record id="hr_rule_deduccion_reintegro" model="hr.salary.rule">
            <field name="name">Deducción Reintegro</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">163</field>
            <field name="code">REINTEGRO_DED</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # For abs(), ceil() if needed
# import logging # Optional
# _logger = logging.getLogger(__name__) # Optional

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# ... Add other categories as needed ...

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for REINTEGRO_DED condition ---
result = False
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    if RecurringItem.search_count(domain) > 0:
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # For abs(), ceil() if needed
# import logging # Optional
# _logger = logging.getLogger(__name__) # Optional

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# ... Add other categories as needed ...

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for REINTEGRO_DED amount ---
result = 0.0
RecurringItem = payslip.env.get('hr.employee.recurring.item')
if RecurringItem:
    domain = [
        ('employee_id', '=', employee.id),
        ('contract_id', '=', contract.id),
        ('recurring_item_type_id.salary_rule_id', '=', rule.id),
        ('active', '=', True),
        ('date_start', '<=', payslip.date_to),
        '|', ('date_end', '=', False), ('date_end', '>=', payslip.date_from),
        '|', ('use_installments', '=', False),
             '&', ('use_installments', '=', True),
                  '|', ('remaining_installments', '>', 0),
                       ('remaining_balance', '>', 0.0)
    ]
    recurring_item = RecurringItem.search(domain, limit=1)

    if recurring_item:
        amount_to_deduct = 0.0
        if recurring_item.amount_type == 'fix':
            amount_to_deduct = recurring_item.amount
        elif recurring_item.amount_type == 'percentage':
            base_value = 0.0
            if recurring_item.percentage_base_rule_code:
                base_value = categories.get(recurring_item.percentage_base_rule_code, 0.0)
            else:
                base_value = recurring_item.amount # Fallback
            amount_to_deduct = base_value * (recurring_item.percentage / 100.0)

        if recurring_item.use_installments and recurring_item.remaining_balance > 0:
            amount_to_deduct = min(amount_to_deduct, recurring_item.remaining_balance)
        
        result = amount_to_deduct
        # (Actualización de saldo/cuotas si aplica)

# Standard currency rounding
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0
result = -abs(result) # Ensure negative for deduction
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">refund</field> <!-- Categoría igual al devengo -->
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field> <!-- Reintegro es a la compañía -->
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: OTRA DEDUCCIÓN (OTRA_DED - Manual)              -->
        <!-- =========================================================== -->
        <record id="hr_rule_otra_deduccion" model="hr.salary.rule">
            <field name="name">Otra Deducción</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">164</field>
            <field name="code">OTRA_DED</field>
            <field name="category_id" ref="hr_payroll.DED"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # For abs(), ceil() if needed
# import logging # Optional
# _logger = logging.getLogger(__name__) # Optional

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# ... Add other categories as needed ...

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for OTRA_DED condition ---
result = False
otra_ded_value = 0.0

# Safely get OTRA_DED value from inputs
otra_ded_input_line = inputs.get('OTRA_DED') # inputs is a dict of hr.payslip.input objects
if otra_ded_input_line and hasattr(otra_ded_input_line, 'amount'):
    try:
        otra_ded_value = float(otra_ded_input_line.amount or 0.0)
    except (ValueError, TypeError):
        otra_ded_value = 0.0

# Condition: Applies if a positive value is provided in the input.
if otra_ded_value > 0:
    result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # For abs(), ceil() if needed
# import logging # Optional
# _logger = logging.getLogger(__name__) # Optional

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# ... Add other categories as needed ...

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for OTRA_DED amount ---
result = 0.0

# Safely get OTRA_DED value from inputs (already validated in condition)
otra_ded_input_line = inputs.get('OTRA_DED')
if otra_ded_input_line and hasattr(otra_ded_input_line, 'amount'):
    try:
        result = float(otra_ded_input_line.amount or 0.0)
    except (ValueError, TypeError):
        result = 0.0

# No additional rounding needed as it's taken directly from input.
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
result = -abs(result) # Ensure negative for deduction
                ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <field name="type_concept">deduction</field>
            <field name="deduction_category">other_deductions</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">default</field>
            <field name="co_partner_select">default</field> <!-- Genérica, sin partner específico -->
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: BASE PARA CÁLCULO PRESTACIONES SOCIALES (Condición Ajustada para Integral) -->
        <!-- =========================================================== -->
        <record id="hr_rule_base_prestaciones" model="hr.salary.rule">
            <field name="name">Base Prestaciones Sociales (Con Aux. Trans.)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">102</field> <!-- Después de IBC -->
            <field name="code">BASE_PRESTACIONES</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# ... Add other categories as needed ...

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for BASE_PRESTACIONES condition ---
# La regla aplica si hay contrato Y NO es aprendiz Y NO es integral
# is_any_apprentice e is_integral vienen del preámbulo.
result = bool(contract and not is_any_apprentice and not is_integral)
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# ... Add other categories as needed ...

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for BASE_PRESTACIONES amount ---
# ¡¡SIMPLIFICACIÓN!! Usa salario + auxilio transporte del mes y otros conceptos.
# La ley puede requerir promedios para salario variable.
# Esta regla solo se ejecuta para empleados REGULARES NO INTEGRALES (condición).
result = 0.0
# Sumar conceptos salariales y AuxTrans que forman base para prestaciones
# REVISA y COMPLETA esta lista con los CÓDIGOS EXACTOS de tus reglas salariales
# para empleados REGULARES que forman base para Prestaciones Sociales.
# Esto incluye SALARIO, AUXTRANS (si aplica por monto), HED, HEN, Comisiones, Bonos Salariales, etc.
# ¡¡TAMBIÉN DEBE INCLUIR LOS CÓDIGOS DE LAS REGLAS QUE PAGAN VACACIONES DISFRUTADAS, INCAPACIDADES, LICENCIAS REMUNERADAS
# si el PAGO de estos conceptos suma a la base de prestaciones (verificar norma)!
salary_codes_for_prestaciones = [
    'SALARIO', 'AUXTRANS', # Asegúrate de que AUXTRANS esté aquí si aplica por monto y hace base prestaciones
    'HED', 'HEN', 'RN', 'HEDDF', 'RDDF', 'HENDF', 'RNDF', # Tiempo Suplementario
    'COMISION', 'BON_S', 'COMP_ORD', # Otros salariales
    # Códigos de reglas que pagan ausencias remuneradas - si su pago suma a la base prestaciones
    # Ejemplo: 'VACDISF', 'IGE1_2', 'IGE3_90', 'IGE91_180', 'LMA', 'ATEP', 'LR'
    # Si tienes reglas separadas para el PAGO de estas ausencias (ej. 'VACDISF_PAY'), usa esos códigos.
    'VACDISF', 'IGE1_2', 'IGE3_90', 'IGE91_180', 'LMA', 'ATEP', 'LR',
    # Añade aquí otros códigos relevantes.
]

# Sumar los totales de las reglas con estos códigos
# Accedemos al total de la regla a través del diccionario 'categories'
# 'categories' contiene los resultados de las reglas ya ejecutadas con secuencia menor.
for code in salary_codes_for_prestaciones:
    result += categories.get(code, 0.0)

# No se aplican topes mínimos/máximos directamente a esta base (se usan en el cálculo final de cada prestación)
# Aplicar redondeo estándar
if not float_is_zero(result, precision_rounding=precision_rounding): # precision_rounding from preamble
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
     result = 0.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: APORTE EMPLEADOR SALUD (SALUD_PAT) - REGULAR    -->
        <!-- =========================================================== -->
        <record id="hr_rule_aporte_salud_empleador_regular" model="hr.salary.rule">
            <field name="name">Aporte Salud Empleador (Regular 8.5%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">200</field> <!-- Secuencia para aportes empleador -->
            <field name="code">SALUD_PAT</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4':
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5':
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100)
apoyo_sost = categories.get('APOYO_SOST', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False # From preamble
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALUD_PAT condition ---
# Aplica si hay IBC > 0, NO es aprendiz Y (la empresa NO está exonerada O el IBC es >= 10 SMMLV).
# is_any_apprentice, is_exonerated_company, ibc, smmlv son del preámbulo.
result = False
if not float_is_zero(ibc, precision_rounding=precision_rounding) and not is_any_apprentice and contract and hasattr(contract, 'eps_id') and contract.eps_id:
    if not is_exonerated_company or (smmlv > 0 and ibc >= (10 * smmlv)):
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # ceil(), abs()
# ... (full preamble, only relevant parts shown for brevity) ...
# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
# --- Common helper variables ---
precision_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALUD_PAT amount ---
# ibc es del preámbulo
# Cálculo base Salud Empleador (8.5% estándar para regulares no exonerados)
aporte_base = ibc * 0.085

# Aplicar redondeo PILA a la centena superior
result = 0.0
if not float_is_zero(aporte_base, precision_rounding=precision_rounding):
    result = math.ceil(aporte_base / 100.0) * 100.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field>
            <field name="edi_percent_fix">8.5</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                 <![CDATA[
# Partner es la EPS asignada en el contrato
result = contract.eps_id.partner_id.id if contract and hasattr(contract, 'eps_id') and contract.eps_id and hasattr(contract.eps_id, 'partner_id') and contract.eps_id.partner_id else None
                 ]]>
             </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: APORTE EMPLEADOR PENSIÓN (PENSION_PAT) - AJUSTADA -->
        <!-- =========================================================== -->
        <record id="hr_rule_aporte_pension_empleador" model="hr.salary.rule">
            <field name="name">Aporte Pensión Empleador (12%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">201</field>
            <field name="code">PENSION_PAT</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para PENSION_PAT (seq 201)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PENSION_PAT condition ---
result = False
# Aplica si es Empleado Regular o Integral.
# CRÍTICO: Debe tener el Fondo de Pensión asignado en el contrato.
# is_regular, is_integral, ibc son del preámbulo.
if contract and hasattr(contract, 'pension_id') and contract.pension_id:
    if (is_regular or is_integral) and not float_is_zero(ibc, precision_rounding=precision_rounding):
        result = True
# NOTA: No aplica a Aprendices.
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # ceil(), abs()
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PENSION_PAT amount ---
# ibc es del preámbulo
# Cálculo base Pensión (12% estándar empleador)
aporte_base = ibc * 0.12

# Aplicar redondeo PILA a la centena superior
result = 0.0
if not float_is_zero(aporte_base, precision_rounding=precision_rounding):
    result = math.ceil(aporte_base / 100.0) * 100.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field>
            <field name="edi_percent_fix">12.0</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                 <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed for this rule's logic
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Partner es el fondo de pensión asignado en el contrato
result = contract.pension_id.partner_id.id if contract and hasattr(contract, 'pension_id') and contract.pension_id and hasattr(contract.pension_id, 'partner_id') and contract.pension_id.partner_id else None
                 ]]>
             </field>
        </record>

        <!-- =========================================================== -->
        <!-- REGLA: APORTE ARL EMPLEADOR - AJUSTADA (Nombre de campo ARL)-->
        <!-- =========================================================== -->
       <record id="hr_rule_aporte_arl_empleador" model="hr.salary.rule">
            <field name="name">Aporte ARL Empleador</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">202</field>
            <field name="code">ARL_PAT</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para ARL_PAT (seq 202)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ARL_PAT condition ---
# Obtener Nivel de Riesgo ARL de forma segura
arl_risk_level = contract.arl_risk_level if contract and hasattr(contract, 'arl_risk_level') else False
result = False
# Aplica si tiene Nivel de Riesgo ARL asignado, Y (es Regular, O Integral, O Aprendiz Productiva).
# is_regular, is_integral, is_apprentice_productiva, ibc, smmlv son del preámbulo.
if arl_risk_level and contract and hasattr(contract, 'arl_id') and contract.arl_id: # Debe tener Nivel de Riesgo y ARL asignada
    if (is_regular or is_integral) and not float_is_zero(ibc, precision_rounding=precision_rounding):
        result = True
    elif is_apprentice_productiva and smmlv > 0: # Base es 1 SMMLV para Aprendiz Productiva
        result = True
# NOTA: No aplica a Aprendices Lectiva.
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # ceil(), abs()
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ARL_PAT amount ---
result = 0.0
base_arl = 0.0
arl_percentage = 0.0

# Obtener Nivel de Riesgo ARL y Porcentaje de forma segura
# contract is available from preamble
arl_risk_level = contract.arl_risk_level if contract and hasattr(contract, 'arl_risk_level') else False
if arl_risk_level and hasattr(arl_risk_level, 'percentage'):
     arl_percentage = arl_risk_level.percentage

# Determinar la base según tipo de empleado
# is_regular, is_integral, is_apprentice_productiva, ibc, smmlv are from preamble
if is_regular or is_integral:
     base_arl = ibc
elif is_apprentice_productiva:
     base_arl = smmlv

# Calcular Aporte ARL (Base * Porcentaje)
if not float_is_zero(base_arl, precision_rounding=precision_rounding) and arl_percentage > 0:
    aporte_base = base_arl * (arl_percentage / 100.0)
    if not float_is_zero(aporte_base, precision_rounding=precision_rounding):
        result = math.ceil(aporte_base / 100.0) * 100.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">code</field>
            <field name="edi_percent_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
# Not strictly needed for this specific EDI percentage logic, but included for consistency
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
# Not strictly needed for this specific EDI percentage logic
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
# company_obj = contract.company_id if contract else None
# if company_obj:
#     if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
#     if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
#     if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
# Not strictly needed for this specific EDI percentage logic
# currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
# precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Porcentaje ARL del nivel de riesgo para la Nómina Electrónica
result = 0.0
if contract and hasattr(contract, 'arl_risk_level') and contract.arl_risk_level and hasattr(contract.arl_risk_level, 'percentage'):
    result = contract.arl_risk_level.percentage
                ]]>
            </field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
# Not strictly needed for this specific partner logic, but included for consistency
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
# Not strictly needed for this specific partner logic
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
# company_obj = contract.company_id if contract else None
# if company_obj:
#     if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
#     if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
#     if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
# Not strictly needed for this specific partner logic
# currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
# precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Partner es la ARL asignada en el contrato
result = contract.arl_id.partner_id.id if contract and hasattr(contract, 'arl_id') and contract.arl_id and hasattr(contract.arl_id, 'partner_id') and contract.arl_id.partner_id else None
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: APORTE EMPLEADOR SENA - AJUSTADA                -->
        <!-- =========================================================== -->
        <record id="hr_rule_aporte_sena_empleador" model="hr.salary.rule">
            <field name="name">Aporte SENA Empleador (2%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">210</field>
            <field name="code">SENA_PAT</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para SENA_PAT (seq 210)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SENA_PAT condition ---
result = False
# is_regular, is_integral, ibc, is_exonerated_company, smmlv son del preámbulo.
# is_any_apprentice también está disponible desde el preámbulo.
if not is_any_apprentice: # No aplica a ningún tipo de aprendiz
    if (is_regular and not float_is_zero(ibc, precision_rounding=precision_rounding) and \
       (not is_exonerated_company or (smmlv > 0 and ibc >= (10 * smmlv)))) or \
       (is_integral and not float_is_zero(ibc, precision_rounding=precision_rounding)):
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # ceil(), abs()
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SENA_PAT amount ---
# ibc es del preámbulo
# Cálculo base SENA (2%)
aporte_base = ibc * 0.02

# Aplicar redondeo PILA a la centena superior
result = 0.0
if not float_is_zero(aporte_base, precision_rounding=precision_rounding):
    result = math.ceil(aporte_base / 100.0) * 100.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field>
            <field name="edi_percent_fix">2.0</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                 <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
# Not strictly needed for this specific partner logic, but included for consistency
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
# Not strictly needed for this specific partner logic
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
# company_obj = contract.company_id if contract else None
# if company_obj:
#     if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
#     if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
#     if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
# Not strictly needed for this specific partner logic
# currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
# precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Partner del SENA (buscar por NIT común o ID externo si está definido en data)
sena_partner = payslip.env['res.partner'].search([('vat', '=', '899999034')], limit=1)
result = sena_partner.id if sena_partner else None
                 ]]>
             </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: APORTE ICBF EMPLEADOR - AJUSTADA                -->
        <!-- =========================================================== -->
        <record id="hr_rule_aporte_icbf_empleador" model="hr.salary.rule">
            <field name="name">Aporte ICBF Empleador (3%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">211</field>
            <field name="code">ICBF_PAT</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para ICBF_PAT (seq 211)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ICBF_PAT condition ---
result = False
# is_regular, is_integral, ibc, is_exonerated_company, smmlv, is_any_apprentice son del preámbulo.
if not is_any_apprentice: # No aplica a ningún tipo de aprendiz
    if (is_regular and not float_is_zero(ibc, precision_rounding=precision_rounding) and \
       (not is_exonerated_company or (smmlv > 0 and ibc >= (10 * smmlv)))) or \
       (is_integral and not float_is_zero(ibc, precision_rounding=precision_rounding)):
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # ceil(), abs()
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for ICBF_PAT amount ---
# ibc es del preámbulo
# Cálculo base ICBF (3%)
aporte_base = ibc * 0.03

# Aplicar redondeo PILA a la centena superior
result = 0.0
if not float_is_zero(aporte_base, precision_rounding=precision_rounding):
    result = math.ceil(aporte_base / 100.0) * 100.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field>
            <field name="edi_percent_fix">3.0</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                 <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
# Not strictly needed for this specific partner logic, but included for consistency
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
# Not strictly needed for this specific partner logic
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
# company_obj = contract.company_id if contract else None
# if company_obj:
#     if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
#     if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
#     if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
# Not strictly needed for this specific partner logic
# currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
# precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Partner del ICBF (buscar por NIT común o ID externo si está definido en data)
icbf_partner = payslip.env['res.partner'].search(['|', ('vat', '=', '8901040441'), ('vat', '=', '890104044-1')], limit=1)
result = icbf_partner.id if icbf_partner else None
                 ]]>
             </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: APORTE EMPLEADOR CCF (CCF_PAT) - AJUSTADA       -->
        <!-- =========================================================== -->
        <record id="hr_rule_aporte_ccf_empleador" model="hr.salary.rule">
            <field name="name">Aporte CCF Empleador (4%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">212</field>
            <field name="code">CCF_PAT</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100) - DISPONIBLE para CCF_PAT (seq 212)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for CCF_PAT condition ---
result = False
# Aplica si es Empleado Regular, O Integral, O Aprendiz (cualquier fase).
# CRÍTICO: Debe tener la Caja de Compensación asignada en el contrato.
# is_regular, is_integral, is_apprentice_lectiva, is_apprentice_productiva, ibc, smmlv son del preámbulo.
if contract and hasattr(contract, 'ccf_id') and contract.ccf_id:
    if (is_regular or is_integral) and not float_is_zero(ibc, precision_rounding=precision_rounding):
        result = True
    elif (is_apprentice_lectiva or is_apprentice_productiva) and smmlv > 0: # Para aprendices, la base es SMMLV, así que debe ser > 0
        result = True
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
import math # ceil(), abs()
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0) # IBC (seq 100)
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for CCF_PAT amount ---
result = 0.0
base_ccf = 0.0
# is_regular, is_integral, is_apprentice_lectiva, is_apprentice_productiva, ibc, smmlv son del preámbulo.

if is_regular or is_integral:
     base_ccf = ibc
elif is_apprentice_lectiva or is_apprentice_productiva: # Para aprendices, la base es 1 SMMLV
     base_ccf = smmlv

# Cálculo CCF (4% sobre la base correcta)
if not float_is_zero(base_ccf, precision_rounding=precision_rounding):
     aporte_base = base_ccf * 0.04
     if not float_is_zero(aporte_base, precision_rounding=precision_rounding):
         result = math.ceil(aporte_base / 100.0) * 100.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>
            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">fix</field>
            <field name="edi_percent_fix">4.0</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare # Always useful for numeric comparisons
# import math # Only if you use math functions (ceil, etc.)
# import logging # Import logging if you need to log messages within the script
# _logger = logging.getLogger(__name__) # Initialize logger if logging is imported

# --- Environment objects (Automatically available) ---
# payslip: hr.payslip record for the current payslip
# employee: hr.employee record
# contract: hr.contract record
# categories: Dictionary with results of rules with lower sequence (e.g., categories.get('IBC', 0.0))
# inputs: Dictionary with amounts from payslip.input_line_ids (e.g., inputs.get('MANUAL_CODE', 0.0))
# worked_days: Dictionary with worked_days_line_ids (e.g., worked_days.get('ATT', None))
# rule: hr.salary.rule record of the current rule
# env: Odoo environment object (use payslip.env for safer access in sandbox)

# --- Employee Type Determination ---
# Not strictly needed for this specific partner logic, but included for consistency
is_regular = False; is_integral = False; is_apprentice_lectiva = False; is_apprentice_productiva = False; is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Fetching key values from categories ---
# ibc = categories.get('IBC', 0.0) # Example, uncomment if needed
# apoyo_sost = categories.get('APOYO_SOST', 0.0) # Example, uncomment if needed

# --- Company specific values ---
# Not strictly needed for this specific partner logic
smmlv = 0.0; uvt_value = 0.0; is_exonerated_company = False
# company_obj = contract.company_id if contract else None
# if company_obj:
#     if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0: smmlv = company_obj.smmlv_value
#     if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0: uvt_value = company_obj.uvt_value
#     if hasattr(company_obj, 'ley_1607'): is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
# Not strictly needed for this specific partner logic
# currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
# precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Partner es la Caja de Compensación asignada en el contrato
result = contract.ccf_id.partner_id.id if contract and hasattr(contract, 'ccf_id') and contract.ccf_id and hasattr(contract.ccf_id, 'partner_id') and contract.ccf_id.partner_id else None
                ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: PROVISIÓN CESANTÍAS (PROV_CES) - AJUSTADA       -->
        <!-- =========================================================== -->
        <record id="hr_rule_provision_cesantias" model="hr.salary.rule">
            <field name="name">Provisión Cesantías (8.33%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">250</field> <!-- Secuencia para provisiones -->
            <field name="code">PROV_CES</field>
            <field name="category_id" ref="hr_payroll.COMP"/> <!-- Categoría Contribuciones Compañía -->
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PROV_CES condition ---
result = bool(is_regular and not float_is_zero(base_prestaciones, precision_rounding=precision_rounding))
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PROV_CES amount ---
# Requiere que una regla previa (con secuencia menor) calcule 'BASE_PRESTACIONES'
# BASE_PRESTACIONES debe incluir Salario + Auxilio de Transporte (si aplica)
base_prov = base_prestaciones # Use base_prestaciones from preamble

# Fórmula: Base Prestaciones * (1/12)
result = base_prov * (1/12) if base_prov > 0 else 0.0

# Redondeo estándar para provisiones
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0 # Ensure it's exactly 0 if very small after calculation/rounding
            ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <!-- Las provisiones no se detallan en el XML de Nómina Electrónica -->
            <!-- No tienen type_concept ni earn/deduction_category -->
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>

            <!-- Partner asociado para la provisión: Es el empleado -->
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Para provisiones, el partner asociado es generalmente el empleado.
result = employee.address_home_id.id if employee and employee.address_home_id else None
            ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: PROVISIÓN INTERESES CESANTÍAS (PROV_INTCES) - AJUSTADA -->
        <!-- =========================================================== -->
        <record id="hr_rule_provision_intereses_cesantias" model="hr.salary.rule">
            <field name="name">Provisión Intereses Cesantías (1% Mensual)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">251</field>
            <field name="code">PROV_INTCES</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PROV_INTCES condition ---
result = bool(is_regular and not float_is_zero(base_prestaciones, precision_rounding=precision_rounding))
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PROV_INTCES amount ---
# Requiere que una regla previa (con secuencia menor) calcule 'BASE_PRESTACIONES'
# Note: This is a simplified monthly provision (1% on the monthly base)
base_prov = base_prestaciones # Use base_prestaciones from preamble

# Fórmula: Base * 1% (mensual)
result = base_prov * 0.01 if base_prov > 0 else 0.0

# Redondeo estándar para provisiones
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0 # Ensure it's exactly 0 if very small after calculation/rounding
            ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <!-- Las provisiones no se detallan en el XML de Nómina Electrónica -->
            <!-- No tienen type_concept ni earn/deduction_category -->
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>

            <!-- Partner asociado para la provisión: Es el empleado -->
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Para provisiones, el partner asociado es generalmente el empleado.
result = employee.address_home_id.id if employee and employee.address_home_id else None
            ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLA: PROVISIÓN PRIMA SERVICIOS (PROV_PRI) - AJUSTADA -->
        <!-- =========================================================== -->
        <record id="hr_rule_provision_prima" model="hr.salary.rule">
            <field name="name">Provisión Prima Servicios (8.33%)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">252</field>
            <field name="code">PROV_PRI</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PROV_PRI condition ---
result = bool(is_regular and not float_is_zero(base_prestaciones, precision_rounding=precision_rounding))
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PROV_PRI amount ---
# Requiere que una regla previa (con secuencia menor) calcule 'BASE_PRESTACIONES'
# BASE_PRESTACIONES debe incluir Salario + Auxilio de Transporte (si aplica)
base_prov = base_prestaciones # Use base_prestaciones from preamble

# Fórmula: Base * (1/12)
result = base_prov * (1/12) if base_prov > 0 else 0.0

# Redondeo estándar para provisiones
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0 # Ensure it's exactly 0 if very small after calculation/rounding
            ]]>
            </field>
            <!-- === Campos Específicos Nómina Electrónica Colombia === -->
            <!-- Las provisiones no se detallan en el XML de Nómina Electrónica -->
            <!-- No tienen type_concept ni earn/deduction_category -->
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>

            <!-- Partner asociado para la provisión: Es el empleado -->
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Para provisiones, el partner asociado es generalmente el empleado.
result = employee.address_home_id.id if employee and employee.address_home_id else None
            ]]>
            </field>
        </record>

       <!-- =========================================================== -->
        <!--      REGLA: PROVISIÓN VACACIONES (PROV_VAC) - AJUSTADA para Integral     -->
        <!-- =========================================================== -->
        <record id="hr_rule_provision_vacaciones" model="hr.salary.rule">
            <field name="name">Provisión Vacaciones (Regular y Integral)</field> <!-- Nombre actualizado -->
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">253</field>
            <field name="code">PROV_VAC</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <!-- Condición: Aplicar si hay contrato Y NO es aprendiz SENA -->
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PROV_VAC condition ---
# Condición: Aplica a Empleados Regulares o Integrales (si hay contrato)
result = bool(contract and (is_regular or is_integral))
                ]]>
            </field>
            <field name="amount_select">code</field>
            <!-- Cálculo: Diferenciar entre Regular (base IBC) e Integral (base 70%/1.3) -->
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for PROV_VAC amount ---
result = 0.0 # Provisión mensual
base_vacaciones = 0.0 # Base a usar para la provisión mensual

# --- Calcular Base de Provisión según Tipo de Empleado ---
if is_regular:
    # Para Regular: Base es IBC (asumiendo que IBC excluye AuxTrans, que es base para Vacaciones)
    base_vacaciones = ibc # Usamos el IBC calculado previamente
    
elif is_integral:
    # Para Integral: Base es (Salario Integral Total / 1.3)
    integral_salary_total = contract.wage if contract and hasattr(contract, 'wage') and isinstance(contract.wage, (int, float)) else 0.0
    factor_prestacional_divisor = 1.3 # Base + 30% factor

    if not float_is_zero(integral_salary_total, precision_rounding=precision_rounding) and factor_prestacional_divisor > 0:
         base_vacaciones = integral_salary_total / factor_prestacional_divisor
    else:
         # Considera loggear si el salario integral es 0 o el divisor es cero
         pass

# --- Calcular Provisión Mensual ---
# Fórmula: Base de Vacaciones * (1/24)
# Solo calculamos si hay base > 0
if not float_is_zero(base_vacaciones, precision_rounding=precision_rounding):
    result = base_vacaciones * (1/24)

# Redondeo estándar para provisiones (puede variar)
if not float_is_zero(result, precision_rounding=precision_rounding):
    if payslip and payslip.currency_id:
        result = payslip.currency_id.round(result)
    else:
        result = round(result, 2) # Fallback
else:
    result = 0.0 # Ensure it's exactly 0 if very small after calculation/rounding
            ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>
            <field name="co_partner_select">code</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Partner es el Empleado
result = employee.address_home_id.id if employee and employee.address_home_id else None
            ]]>
            </field>
        </record>

        <!-- =========================================================== -->
        <!--      REGLAS ESPECÍFICAS PARA APRENDICES (SOBRE 1 SMMLV)     -->
        <!-- =========================================================== -->
        <record id="hr_rule_aporte_salud_empleador_aprendiz" model="hr.salary.rule">
            <field name="name">Aporte Salud Empleador (Aprendiz)</field>
            <field name="struct_id" ref="l10n_co_nomina.hr_payroll_structure_co_base"/>
            <field name="sequence">205</field> <!-- Secuencia cercana a otros aportes salud -->
            <field name="code">SALUD_PAT_APR</field>
            <field name="category_id" ref="hr_payroll.COMP"/>
            <field name="condition_select">python</field>
            <field name="condition_python">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALUD_PAT_APR condition ---
result = False
# Aplica si es Aprendiz (cualquier fase).
# CRÍTICO: Debe tener la EPS asignada en el contrato.
if contract and hasattr(contract, 'eps_id') and contract.eps_id and (is_apprentice_lectiva or is_apprentice_productiva) and smmlv > 0: # Debe tener EPS y SMMLV
    result = True
# NOTA: No aplica a Regulares o Integrales.
                ]]>
            </field>
            <field name="amount_select">code</field>
            <field name="amount_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
import math # ceil(), abs()
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary:
        is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': # Aprendiz SENA Etapa Lectiva
            is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': # Aprendiz SENA Etapa Productiva / Prácticas
            is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice:
        is_regular = True

# --- Fetching key values from categories ---
ibc = categories.get('IBC', 0.0)
apoyo_sost = categories.get('APOYO_SOST', 0.0)
# Access BASE_PRESTACIONES which should have a lower sequence (e.g., 102)
base_prestaciones = categories.get('BASE_PRESTACIONES', 0.0)

# --- Company specific values ---
smmlv = 0.0
uvt_value = 0.0
is_exonerated_company = False
company_obj = contract.company_id if contract else None
if company_obj:
    if hasattr(company_obj, 'smmlv_value') and isinstance(company_obj.smmlv_value, (int, float)) and company_obj.smmlv_value > 0:
        smmlv = company_obj.smmlv_value
    if hasattr(company_obj, 'uvt_value') and isinstance(company_obj.uvt_value, (int, float)) and company_obj.uvt_value > 0:
        uvt_value = company_obj.uvt_value
    if hasattr(company_obj, 'ley_1607'):
        is_exonerated_company = bool(company_obj.ley_1607)

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# --- Specific Rule Logic for SALUD_PAT_APR amount ---
result = 0.0
base_salud = smmlv # Base para aprendices es 1 SMMLV
aporte_percentage = 0.0

# Determinar porcentaje según fase (Lectiva 12.5%, Productiva 8.5%)
if is_apprentice_lectiva:
    aporte_percentage = 0.125
elif is_apprentice_productiva:
    aporte_percentage = 0.085

# Calcular Aporte Salud Empleador (Base * Porcentaje)
if not float_is_zero(base_salud, precision_rounding=precision_rounding) and aporte_percentage > 0:
    aporte_base = base_salud * aporte_percentage
    # Aplicar redondeo PILA a la centena superior
    if not float_is_zero(aporte_base, precision_rounding=precision_rounding):
         result = math.ceil(aporte_base / 100.0) * 100.0

# Ensure result is 0 if calculation wasn't made or was very small
if float_is_zero(result, precision_rounding=precision_rounding):
    result = 0.0
                ]]>
            </field>
            <field name="appears_on_payslip" eval="False"/>
            <field name="type_concept">other</field>
            <!-- earn_category es más para nómina electrónica, verificar código DIAN -->
            <!-- <field name="earn_category">health_contribution</field> -->

            <field name="edi_is_detailed" eval="False"/>
            <field name="edi_quantity_select">default</field>
            <field name="edi_percent_select">code</field>
            <field name="edi_percent_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================

# Determinar porcentaje según fase (Lectiva 12.5%, Productiva 8.5%) para Nomina Electronica
# is_apprentice_lectiva and is_apprentice_productiva are from preamble
result = 0.0
if is_apprentice_lectiva:
    result = 12.5 # Percentage for EDI (fixed value)
elif is_apprentice_productiva:
    result = 8.5 # Percentage for EDI (fixed value)

                ]]>
            </field>
            <field name="co_partner_select">default</field>
            <field name="co_partner_python_compute">
                <![CDATA[
# ======================================================
# Common Preamble for Salary Rules - START
# ======================================================
from odoo.tools import float_is_zero, float_compare
# import math
# import logging
# _logger = logging.getLogger(__name__)

# --- Environment objects (Automatically available) ---
# payslip, employee, contract, categories, inputs, worked_days, rule, env

# --- Employee Type Determination ---
is_regular = False
is_integral = False
is_apprentice_lectiva = False
is_apprentice_productiva = False
is_any_apprentice = False
if contract:
    if hasattr(contract, 'integral_salary') and contract.integral_salary: is_integral = True
    elif contract.contract_type_id and contract.contract_type_id.code:
        contract_type_code = contract.contract_type_id.code
        if contract_type_code == '4': is_apprentice_lectiva = True; is_any_apprentice = True
        elif contract_type_code == '5': is_apprentice_productiva = True; is_any_apprentice = True
    if not is_integral and not is_any_apprentice: is_regular = True

# --- Common helper variables ---
currency_rounding = payslip.currency_id.rounding if payslip and payslip.currency_id else 0.01
precision_rounding = currency_rounding
# ======================================================
# Common Preamble for Salary Rules - END
# ======================================================
# Partner es la EPS asignada en el contrato
result = contract.eps_id.partner_id.id if contract and hasattr(contract, 'eps_id') and contract.eps_id and hasattr(contract.eps_id, 'partner_id') and contract.eps_id.partner_id else None
                ]]>
            </field>
        </record>
    </data>
</odoo>
